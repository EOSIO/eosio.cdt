;;; TOOL: run-interp
;;; ARGS*: --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd --enable-tail-call --enable-bulk-memory
;;; ARGS1: --trace --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))
  (data "")
  (elem funcref)

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))

  ;; --enable-tail-call
  (; 0x12 ;) (func (export "return_call") return_call $empty)
  (; 0x13 ;) (func (export "return_call_indirect") i32.const 1 return_call_indirect (type $empty))

  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) ;; data  -- never executed
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  ;; --enable-bulk-memory
  (; 0xfc 0x08 ;) (func (export "memory.init") i32.const 1 i32.const 2 i32.const 3 memory.init 0)
  (; 0xfc 0x09 ;) (func (export "data.drop") data.drop 0)
  (; 0xfc 0x0a ;) (func (export "memory.copy") i32.const 1 i32.const 2 i32.const 3 memory.copy)
  (; 0xfc 0x0b ;) (func (export "memory.fill") i32.const 1 i32.const 2 i32.const 3 memory.fill)
  (; 0xfc 0x0c ;) (func (export "table.init") i32.const 1 i32.const 2 i32.const 3 table.init 0)
  (; 0xfc 0x0d ;) (func (export "elem.drop") elem.drop 0)
  (; 0xfc 0x0e ;) (func (export "table.copy") i32.const 1 i32.const 2 i32.const 3 table.copy)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x01 ;) (func (export "v128.store") i32.const 1 v128.const i32x4 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x02 ;) (func (export "v128.const") v128.const i32x4 1 1 1 1 drop)
  (; 0xfd 0x03 ;) (func (export "v8x16.shuffle") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v8x16.shuffle 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 drop)
  (; 0xfd 0x04 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x05 ;) (func (export "i8x16.extract_lane_s") v128.const i32x4 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x06 ;) (func (export "i8x16.extract_lane_u") v128.const i32x4 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x07 ;) (func (export "i8x16.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x08 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x09 ;) (func (export "i16x8.extract_lane_s") v128.const i32x4 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0a ;) (func (export "i16x8.extract_lane_u") v128.const i32x4 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x0c ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32x4 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i32x4.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x0f ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x10 ;) (func (export "i64x2.extract_lane") v128.const i32x4 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i64x2.replace_lane") v128.const i32x4 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x12 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x13 ;) (func (export "f32x4.extract_lane") v128.const i32x4 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "f32x4.replace_lane") v128.const i32x4 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x15 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.extract_lane") v128.const i32x4 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "f64x2.replace_lane") v128.const i32x4 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x19 ;) (func (export "i8x16.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x1a ;) (func (export "i8x16.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x1b ;) (func (export "i8x16.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x1d ;) (func (export "i8x16.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x1e ;) (func (export "i8x16.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x1f ;) (func (export "i8x16.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x21 ;) (func (export "i8x16.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x22 ;) (func (export "i16x8.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x23 ;) (func (export "i16x8.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x25 ;) (func (export "i16x8.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x26 ;) (func (export "i16x8.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x27 ;) (func (export "i16x8.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x28 ;) (func (export "i16x8.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x2b ;) (func (export "i16x8.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x2c ;) (func (export "i32x4.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x2d ;) (func (export "i32x4.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x2e ;) (func (export "i32x4.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x2f ;) (func (export "i32x4.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x30 ;) (func (export "i32x4.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x32 ;) (func (export "i32x4.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x33 ;) (func (export "i32x4.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x34 ;) (func (export "i32x4.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x35 ;) (func (export "i32x4.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x40 ;) (func (export "f32x4.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x41 ;) (func (export "f32x4.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x42 ;) (func (export "f32x4.lt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x43 ;) (func (export "f32x4.gt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x44 ;) (func (export "f32x4.le") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x45 ;) (func (export "f32x4.ge") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x46 ;) (func (export "f64x2.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x47 ;) (func (export "f64x2.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x48 ;) (func (export "f64x2.lt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x49 ;) (func (export "f64x2.gt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x4a ;) (func (export "f64x2.le") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x4b ;) (func (export "f64x2.ge") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x4c ;) (func (export "v128.not") v128.const i32x4 1 1 1 1 v128.not drop)
  (; 0xfd 0x4d ;) (func (export "v128.and") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.and drop)
  (; 0xfd 0x4e ;) (func (export "v128.or") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.or drop)
  (; 0xfd 0x4f ;) (func (export "v128.xor") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.xor drop)
  (; 0xfd 0x50 ;) (func (export "v128.bitselect") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.const i32x4 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x51 ;) (func (export "i8x16.neg") v128.const i32x4 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.any_true") v128.const i32x4 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.all_true") v128.const i32x4 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x54 ;) (func (export "i8x16.shl") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x55 ;) (func (export "i8x16.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x56 ;) (func (export "i8x16.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x57 ;) (func (export "i8x16.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x58 ;) (func (export "i8x16.add_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x59 ;) (func (export "i8x16.add_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.sub_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x5c ;) (func (export "i8x16.sub_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x5d ;) (func (export "i8x16.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x62 ;) (func (export "i16x8.neg") v128.const i32x4 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x63 ;) (func (export "i16x8.any_true") v128.const i32x4 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.all_true") v128.const i32x4 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.shl") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x66 ;) (func (export "i16x8.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x67 ;) (func (export "i16x8.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x68 ;) (func (export "i16x8.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x69 ;) (func (export "i16x8.add_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x6a ;) (func (export "i16x8.add_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x6b ;) (func (export "i16x8.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.sub_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.sub_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x6e ;) (func (export "i16x8.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x73 ;) (func (export "i32x4.neg") v128.const i32x4 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x74 ;) (func (export "i32x4.any_true") v128.const i32x4 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x75 ;) (func (export "i32x4.all_true") v128.const i32x4 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x76 ;) (func (export "i32x4.shl") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x77 ;) (func (export "i32x4.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x78 ;) (func (export "i32x4.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x79 ;) (func (export "i32x4.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x7c ;) (func (export "i32x4.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x7f ;) (func (export "i32x4.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x84 ;) (func (export "i64x2.neg") v128.const i32x4 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x85 ;) (func (export "i64x2.any_true") v128.const i32x4 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x86 ;) (func (export "i64x2.all_true") v128.const i32x4 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x87 ;) (func (export "i64x2.shl") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x88 ;) (func (export "i64x2.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x89 ;) (func (export "i64x2.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x8d ;) (func (export "i64x2.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x95 ;) (func (export "f32x4.abs") v128.const i32x4 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x96 ;) (func (export "f32x4.neg") v128.const i32x4 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x97 ;) (func (export "f32x4.sqrt") v128.const i32x4 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x9a ;) (func (export "f32x4.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x9b ;) (func (export "f32x4.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x9c ;) (func (export "f32x4.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x9d ;) (func (export "f32x4.div") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x9e ;) (func (export "f32x4.min") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x9f ;) (func (export "f32x4.max") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.max drop)
  (; 0xfd 0xa0 ;) (func (export "f64x2.abs") v128.const i32x4 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0xa1 ;) (func (export "f64x2.neg") v128.const i32x4 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0xa2 ;) (func (export "f64x2.sqrt") v128.const i32x4 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0xa5 ;) (func (export "f64x2.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.add drop)
  (; 0xfd 0xa6 ;) (func (export "f64x2.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0xa7 ;) (func (export "f64x2.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0xa8 ;) (func (export "f64x2.div") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.div drop)
  (; 0xfd 0xa9 ;) (func (export "f64x2.min") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.min drop)
  (; 0xfd 0xaa ;) (func (export "f64x2.max") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.max drop)
  (; 0xfd 0xab ;) (func (export "i32x4.trunc_sat_f32x4_s") v128.const i32x4 1 1 1 1 i32x4.trunc_sat_f32x4_s drop)
  (; 0xfd 0xac ;) (func (export "i32x4.trunc_sat_f32x4_u") v128.const i32x4 1 1 1 1 i32x4.trunc_sat_f32x4_u drop)
  (; 0xfd 0xad ;) (func (export "i64x2.trunc_sat_f64x2_s") v128.const i32x4 1 1 1 1 i64x2.trunc_sat_f64x2_s drop)
  (; 0xfd 0xae ;) (func (export "i64x2.trunc_sat_f64x2_u") v128.const i32x4 1 1 1 1 i64x2.trunc_sat_f64x2_u drop)
  (; 0xfd 0xaf ;) (func (export "f32x4.convert_i32x4_s") v128.const i32x4 1 1 1 1 f32x4.convert_i32x4_s drop)
  (; 0xfd 0xb0 ;) (func (export "f32x4.convert_i32x4_u") v128.const i32x4 1 1 1 1 f32x4.convert_i32x4_u drop)
  (; 0xfd 0xb1 ;) (func (export "f64x2.convert_i64x2_s") v128.const i32x4 1 1 1 1 f64x2.convert_i64x2_s drop)
  (; 0xfd 0xb2 ;) (func (export "f64x2.convert_i64x2_u") v128.const i32x4 1 1 1 1 f64x2.convert_i64x2_u drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.notify") i32.const 1 i32.const 2 atomic.notify offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8.add_u") i32.const 1 i32.const 2 i32.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16.add_u") i32.const 1 i32.const 2 i32.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8.add_u") i32.const 1 i64.const 2 i64.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16.add_u") i32.const 1 i64.const 2 i64.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32.add_u") i32.const 1 i64.const 2 i64.atomic.rmw32.add_u offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw32.sub_u offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8.and_u") i32.const 1 i32.const 2 i32.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16.and_u") i32.const 1 i32.const 2 i32.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8.and_u") i32.const 1 i64.const 2 i64.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16.and_u") i32.const 1 i64.const 2 i64.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32.and_u") i32.const 1 i64.const 2 i64.atomic.rmw32.and_u offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8.or_u") i32.const 1 i32.const 2 i32.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16.or_u") i32.const 1 i32.const 2 i32.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8.or_u") i32.const 1 i64.const 2 i64.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16.or_u") i32.const 1 i64.const 2 i64.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32.or_u") i32.const 1 i64.const 2 i64.atomic.rmw32.or_u offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xor_u offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xchg_u offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32.cmpxchg_u offset=3 drop)
)
(;; STDOUT ;;;
>>> initializing segments
>>> running export "unreachable":
#0.    4: V:0  | unreachable
unreachable() => error: unreachable executed
>>> running export "br":
#0.   12: V:0  | br @20
#0.   20: V:0  | return
br() =>
>>> running export "br_table":
#0.   24: V:0  | i32.const 1
#0.   32: V:1  | br_table 1, $#0, table:$52
#0.   64: V:0  | return
br_table() =>
>>> running export "return":
#0.   68: V:0  | return
return() =>
>>> running export "call":
#0.   76: V:0  | call @0
#1.    0: V:0  | return
#0.   84: V:0  | return
call() =>
>>> running export "call_indirect":
#0.   88: V:0  | i32.const 1
#0.   96: V:1  | call_indirect $0, 1
#1.    0: V:0  | return
#0.  108: V:0  | return
call_indirect() =>
>>> running export "return_call":
#0.  112: V:0  | return_call @0
#0.    0: V:0  | return
return_call() =>
>>> running export "return_call_indirect":
#0.  124: V:0  | i32.const 1
#0.  132: V:1  | return_call_indirect $0, 1
#0.    0: V:0  | return
return_call_indirect() =>
>>> running export "drop":
#0.  148: V:0  | i32.const 1
#0.  156: V:1  | drop
#0.  160: V:0  | return
drop() =>
>>> running export "select":
#0.  164: V:0  | i32.const 1
#0.  172: V:1  | i32.const 2
#0.  180: V:2  | i32.const 3
#0.  188: V:3  | select 1, %[-2], %[-1]
#0.  192: V:1  | drop
#0.  196: V:0  | return
select() =>
>>> running export "get_local":
#0.  200: V:0  | alloca $1
#0.  208: V:1  | local.get $1
#0.  216: V:2  | drop
#0.  220: V:1  | drop
#0.  224: V:0  | return
get_local() =>
>>> running export "set_local":
#0.  228: V:0  | alloca $1
#0.  236: V:1  | i32.const 1
#0.  244: V:2  | local.set $1, 1
#0.  252: V:1  | drop
#0.  256: V:0  | return
set_local() =>
>>> running export "tee_local":
#0.  260: V:0  | alloca $1
#0.  268: V:1  | i32.const 1
#0.  276: V:2  | local.tee $2, 1
#0.  284: V:2  | drop
#0.  288: V:1  | drop
#0.  292: V:0  | return
tee_local() =>
>>> running export "get_global":
#0.  296: V:0  | global.get $0
#0.  304: V:1  | drop
#0.  308: V:0  | return
get_global() =>
>>> running export "set_global":
#0.  312: V:0  | i32.const 1
#0.  320: V:1  | global.set $0, 1
#0.  328: V:0  | return
set_global() =>
>>> running export "i32.load":
#0.  332: V:0  | i32.const 1
#0.  340: V:1  | i32.load $0:1+$2
#0.  352: V:1  | drop
#0.  356: V:0  | return
i32.load() =>
>>> running export "i64.load":
#0.  360: V:0  | i32.const 1
#0.  368: V:1  | i64.load $0:1+$2
#0.  380: V:1  | drop
#0.  384: V:0  | return
i64.load() =>
>>> running export "f32.load":
#0.  388: V:0  | i32.const 1
#0.  396: V:1  | f32.load $0:1+$2
#0.  408: V:1  | drop
#0.  412: V:0  | return
f32.load() =>
>>> running export "f64.load":
#0.  416: V:0  | i32.const 1
#0.  424: V:1  | f64.load $0:1+$2
#0.  436: V:1  | drop
#0.  440: V:0  | return
f64.load() =>
>>> running export "i32.load8_s":
#0.  444: V:0  | i32.const 1
#0.  452: V:1  | i32.load8_s $0:1+$2
#0.  464: V:1  | drop
#0.  468: V:0  | return
i32.load8_s() =>
>>> running export "i32.load8_u":
#0.  472: V:0  | i32.const 1
#0.  480: V:1  | i32.load8_u $0:1+$2
#0.  492: V:1  | drop
#0.  496: V:0  | return
i32.load8_u() =>
>>> running export "i32.load16_s":
#0.  500: V:0  | i32.const 1
#0.  508: V:1  | i32.load16_s $0:1+$2
#0.  520: V:1  | drop
#0.  524: V:0  | return
i32.load16_s() =>
>>> running export "i32.load16_u":
#0.  528: V:0  | i32.const 1
#0.  536: V:1  | i32.load16_u $0:1+$2
#0.  548: V:1  | drop
#0.  552: V:0  | return
i32.load16_u() =>
>>> running export "i64.load8_s":
#0.  556: V:0  | i32.const 1
#0.  564: V:1  | i64.load8_s $0:1+$2
#0.  576: V:1  | drop
#0.  580: V:0  | return
i64.load8_s() =>
>>> running export "i64.load8_u":
#0.  584: V:0  | i32.const 1
#0.  592: V:1  | i64.load8_u $0:1+$2
#0.  604: V:1  | drop
#0.  608: V:0  | return
i64.load8_u() =>
>>> running export "i64.load16_s":
#0.  612: V:0  | i32.const 1
#0.  620: V:1  | i64.load16_s $0:1+$2
#0.  632: V:1  | drop
#0.  636: V:0  | return
i64.load16_s() =>
>>> running export "i64.load16_u":
#0.  640: V:0  | i32.const 1
#0.  648: V:1  | i64.load16_u $0:1+$2
#0.  660: V:1  | drop
#0.  664: V:0  | return
i64.load16_u() =>
>>> running export "i64.load32_s":
#0.  668: V:0  | i32.const 1
#0.  676: V:1  | i64.load32_s $0:1+$2
#0.  688: V:1  | drop
#0.  692: V:0  | return
i64.load32_s() =>
>>> running export "i64.load32_u":
#0.  696: V:0  | i32.const 1
#0.  704: V:1  | i64.load32_u $0:1+$2
#0.  716: V:1  | drop
#0.  720: V:0  | return
i64.load32_u() =>
>>> running export "i32.store":
#0.  724: V:0  | i32.const 1
#0.  732: V:1  | i32.const 2
#0.  740: V:2  | i32.store $0:1+$2, 2
#0.  752: V:0  | return
i32.store() =>
>>> running export "i64.store":
#0.  756: V:0  | i32.const 1
#0.  764: V:1  | i64.const 2
#0.  776: V:2  | i64.store $0:1+$2, 2
#0.  788: V:0  | return
i64.store() =>
>>> running export "f32.store":
#0.  792: V:0  | i32.const 1
#0.  800: V:1  | f32.const 2
#0.  808: V:2  | f32.store $0:1+$2, 2
#0.  820: V:0  | return
f32.store() =>
>>> running export "f64.store":
#0.  824: V:0  | i32.const 1
#0.  832: V:1  | f64.const 2
#0.  844: V:2  | f64.store $0:1+$2, 2
#0.  856: V:0  | return
f64.store() =>
>>> running export "i32.store8":
#0.  860: V:0  | i32.const 1
#0.  868: V:1  | i32.const 2
#0.  876: V:2  | i32.store8 $0:1+$2, 2
#0.  888: V:0  | return
i32.store8() =>
>>> running export "i32.store16":
#0.  892: V:0  | i32.const 1
#0.  900: V:1  | i32.const 2
#0.  908: V:2  | i32.store16 $0:1+$2, 2
#0.  920: V:0  | return
i32.store16() =>
>>> running export "i64.store8":
#0.  924: V:0  | i32.const 1
#0.  932: V:1  | i64.const 2
#0.  944: V:2  | i64.store8 $0:1+$2, 2
#0.  956: V:0  | return
i64.store8() =>
>>> running export "i64.store16":
#0.  960: V:0  | i32.const 1
#0.  968: V:1  | i64.const 2
#0.  980: V:2  | i64.store16 $0:1+$2, 2
#0.  992: V:0  | return
i64.store16() =>
>>> running export "i64.store32":
#0.  996: V:0  | i32.const 1
#0. 1004: V:1  | i64.const 2
#0. 1016: V:2  | i64.store32 $0:1+$2, 2
#0. 1028: V:0  | return
i64.store32() =>
>>> running export "current_memory":
#0. 1032: V:0  | memory.size $0
#0. 1040: V:1  | drop
#0. 1044: V:0  | return
current_memory() =>
>>> running export "grow_memory":
#0. 1048: V:0  | i32.const 1
#0. 1056: V:1  | memory.grow $0:1
#0. 1064: V:1  | drop
#0. 1068: V:0  | return
grow_memory() =>
>>> running export "i32.const":
#0. 1072: V:0  | i32.const 1
#0. 1080: V:1  | drop
#0. 1084: V:0  | return
i32.const() =>
>>> running export "i64.const":
#0. 1088: V:0  | i64.const 1
#0. 1100: V:1  | drop
#0. 1104: V:0  | return
i64.const() =>
>>> running export "f32.const":
#0. 1108: V:0  | f32.const 1
#0. 1116: V:1  | drop
#0. 1120: V:0  | return
f32.const() =>
>>> running export "f64.const":
#0. 1124: V:0  | f64.const 1
#0. 1136: V:1  | drop
#0. 1140: V:0  | return
f64.const() =>
>>> running export "i32.eqz":
#0. 1144: V:0  | i32.const 1
#0. 1152: V:1  | i32.eqz 1
#0. 1156: V:1  | drop
#0. 1160: V:0  | return
i32.eqz() =>
>>> running export "i32.eq":
#0. 1164: V:0  | i32.const 1
#0. 1172: V:1  | i32.const 2
#0. 1180: V:2  | i32.eq 1, 2
#0. 1184: V:1  | drop
#0. 1188: V:0  | return
i32.eq() =>
>>> running export "i32.ne":
#0. 1192: V:0  | i32.const 1
#0. 1200: V:1  | i32.const 2
#0. 1208: V:2  | i32.ne 1, 2
#0. 1212: V:1  | drop
#0. 1216: V:0  | return
i32.ne() =>
>>> running export "i32.lt_s":
#0. 1220: V:0  | i32.const 1
#0. 1228: V:1  | i32.const 2
#0. 1236: V:2  | i32.lt_s 1, 2
#0. 1240: V:1  | drop
#0. 1244: V:0  | return
i32.lt_s() =>
>>> running export "i32.lt_u":
#0. 1248: V:0  | i32.const 1
#0. 1256: V:1  | i32.const 2
#0. 1264: V:2  | i32.lt_u 1, 2
#0. 1268: V:1  | drop
#0. 1272: V:0  | return
i32.lt_u() =>
>>> running export "i32.gt_s":
#0. 1276: V:0  | i32.const 1
#0. 1284: V:1  | i32.const 2
#0. 1292: V:2  | i32.gt_s 1, 2
#0. 1296: V:1  | drop
#0. 1300: V:0  | return
i32.gt_s() =>
>>> running export "i32.gt_u":
#0. 1304: V:0  | i32.const 1
#0. 1312: V:1  | i32.const 2
#0. 1320: V:2  | i32.gt_u 1, 2
#0. 1324: V:1  | drop
#0. 1328: V:0  | return
i32.gt_u() =>
>>> running export "i32.le_s":
#0. 1332: V:0  | i32.const 1
#0. 1340: V:1  | i32.const 2
#0. 1348: V:2  | i32.le_s 1, 2
#0. 1352: V:1  | drop
#0. 1356: V:0  | return
i32.le_s() =>
>>> running export "i32.le_u":
#0. 1360: V:0  | i32.const 1
#0. 1368: V:1  | i32.const 2
#0. 1376: V:2  | i32.le_u 1, 2
#0. 1380: V:1  | drop
#0. 1384: V:0  | return
i32.le_u() =>
>>> running export "i32.ge_s":
#0. 1388: V:0  | i32.const 1
#0. 1396: V:1  | i32.const 2
#0. 1404: V:2  | i32.ge_s 1, 2
#0. 1408: V:1  | drop
#0. 1412: V:0  | return
i32.ge_s() =>
>>> running export "i32.ge_u":
#0. 1416: V:0  | i32.const 1
#0. 1424: V:1  | i32.const 2
#0. 1432: V:2  | i32.ge_u 1, 2
#0. 1436: V:1  | drop
#0. 1440: V:0  | return
i32.ge_u() =>
>>> running export "i64.eqz":
#0. 1444: V:0  | i64.const 1
#0. 1456: V:1  | i64.eqz 1
#0. 1460: V:1  | drop
#0. 1464: V:0  | return
i64.eqz() =>
>>> running export "i64.eq":
#0. 1468: V:0  | i64.const 1
#0. 1480: V:1  | i64.const 2
#0. 1492: V:2  | i64.eq 1, 2
#0. 1496: V:1  | drop
#0. 1500: V:0  | return
i64.eq() =>
>>> running export "i64.ne":
#0. 1504: V:0  | i64.const 1
#0. 1516: V:1  | i64.const 2
#0. 1528: V:2  | i64.ne 1, 2
#0. 1532: V:1  | drop
#0. 1536: V:0  | return
i64.ne() =>
>>> running export "i64.lt_s":
#0. 1540: V:0  | i64.const 1
#0. 1552: V:1  | i64.const 2
#0. 1564: V:2  | i64.lt_s 1, 2
#0. 1568: V:1  | drop
#0. 1572: V:0  | return
i64.lt_s() =>
>>> running export "i64.lt_u":
#0. 1576: V:0  | i64.const 1
#0. 1588: V:1  | i64.const 2
#0. 1600: V:2  | i64.lt_u 1, 2
#0. 1604: V:1  | drop
#0. 1608: V:0  | return
i64.lt_u() =>
>>> running export "i64.gt_s":
#0. 1612: V:0  | i64.const 1
#0. 1624: V:1  | i64.const 2
#0. 1636: V:2  | i64.gt_s 1, 2
#0. 1640: V:1  | drop
#0. 1644: V:0  | return
i64.gt_s() =>
>>> running export "i64.gt_u":
#0. 1648: V:0  | i64.const 1
#0. 1660: V:1  | i64.const 2
#0. 1672: V:2  | i64.gt_u 1, 2
#0. 1676: V:1  | drop
#0. 1680: V:0  | return
i64.gt_u() =>
>>> running export "i64.le_s":
#0. 1684: V:0  | i64.const 1
#0. 1696: V:1  | i64.const 2
#0. 1708: V:2  | i64.le_s 1, 2
#0. 1712: V:1  | drop
#0. 1716: V:0  | return
i64.le_s() =>
>>> running export "i64.le_u":
#0. 1720: V:0  | i64.const 1
#0. 1732: V:1  | i64.const 2
#0. 1744: V:2  | i64.le_u 1, 2
#0. 1748: V:1  | drop
#0. 1752: V:0  | return
i64.le_u() =>
>>> running export "i64.ge_s":
#0. 1756: V:0  | i64.const 1
#0. 1768: V:1  | i64.const 2
#0. 1780: V:2  | i64.ge_s 1, 2
#0. 1784: V:1  | drop
#0. 1788: V:0  | return
i64.ge_s() =>
>>> running export "i64.ge_u":
#0. 1792: V:0  | i64.const 1
#0. 1804: V:1  | i64.const 2
#0. 1816: V:2  | i64.ge_u 1, 2
#0. 1820: V:1  | drop
#0. 1824: V:0  | return
i64.ge_u() =>
>>> running export "f32.eq":
#0. 1828: V:0  | f32.const 1
#0. 1836: V:1  | f32.const 2
#0. 1844: V:2  | f32.eq 1, 2
#0. 1848: V:1  | drop
#0. 1852: V:0  | return
f32.eq() =>
>>> running export "f32.ne":
#0. 1856: V:0  | f32.const 1
#0. 1864: V:1  | f32.const 2
#0. 1872: V:2  | f32.ne 1, 2
#0. 1876: V:1  | drop
#0. 1880: V:0  | return
f32.ne() =>
>>> running export "f32.lt":
#0. 1884: V:0  | f32.const 1
#0. 1892: V:1  | f32.const 2
#0. 1900: V:2  | f32.lt 1, 2
#0. 1904: V:1  | drop
#0. 1908: V:0  | return
f32.lt() =>
>>> running export "f32.gt":
#0. 1912: V:0  | f32.const 1
#0. 1920: V:1  | f32.const 2
#0. 1928: V:2  | f32.gt 1, 2
#0. 1932: V:1  | drop
#0. 1936: V:0  | return
f32.gt() =>
>>> running export "f32.le":
#0. 1940: V:0  | f32.const 1
#0. 1948: V:1  | f32.const 2
#0. 1956: V:2  | f32.le 1, 2
#0. 1960: V:1  | drop
#0. 1964: V:0  | return
f32.le() =>
>>> running export "f32.ge":
#0. 1968: V:0  | f32.const 1
#0. 1976: V:1  | f32.const 2
#0. 1984: V:2  | f32.ge 1, 2
#0. 1988: V:1  | drop
#0. 1992: V:0  | return
f32.ge() =>
>>> running export "f64.eq":
#0. 1996: V:0  | f64.const 1
#0. 2008: V:1  | f64.const 2
#0. 2020: V:2  | f64.eq 1, 2
#0. 2024: V:1  | drop
#0. 2028: V:0  | return
f64.eq() =>
>>> running export "f64.ne":
#0. 2032: V:0  | f64.const 1
#0. 2044: V:1  | f64.const 2
#0. 2056: V:2  | f64.ne 1, 2
#0. 2060: V:1  | drop
#0. 2064: V:0  | return
f64.ne() =>
>>> running export "f64.lt":
#0. 2068: V:0  | f64.const 1
#0. 2080: V:1  | f64.const 2
#0. 2092: V:2  | f64.lt 1, 2
#0. 2096: V:1  | drop
#0. 2100: V:0  | return
f64.lt() =>
>>> running export "f64.gt":
#0. 2104: V:0  | f64.const 1
#0. 2116: V:1  | f64.const 2
#0. 2128: V:2  | f64.gt 1, 2
#0. 2132: V:1  | drop
#0. 2136: V:0  | return
f64.gt() =>
>>> running export "f64.le":
#0. 2140: V:0  | f64.const 1
#0. 2152: V:1  | f64.const 2
#0. 2164: V:2  | f64.le 1, 2
#0. 2168: V:1  | drop
#0. 2172: V:0  | return
f64.le() =>
>>> running export "f64.ge":
#0. 2176: V:0  | f64.const 1
#0. 2188: V:1  | f64.const 2
#0. 2200: V:2  | f64.ge 1, 2
#0. 2204: V:1  | drop
#0. 2208: V:0  | return
f64.ge() =>
>>> running export "i32.clz":
#0. 2212: V:0  | i32.const 1
#0. 2220: V:1  | i32.clz 1
#0. 2224: V:1  | drop
#0. 2228: V:0  | return
i32.clz() =>
>>> running export "i32.ctz":
#0. 2232: V:0  | i32.const 1
#0. 2240: V:1  | i32.ctz 1
#0. 2244: V:1  | drop
#0. 2248: V:0  | return
i32.ctz() =>
>>> running export "i32.popcnt":
#0. 2252: V:0  | i32.const 1
#0. 2260: V:1  | i32.popcnt 1
#0. 2264: V:1  | drop
#0. 2268: V:0  | return
i32.popcnt() =>
>>> running export "i32.add":
#0. 2272: V:0  | i32.const 1
#0. 2280: V:1  | i32.const 2
#0. 2288: V:2  | i32.add 1, 2
#0. 2292: V:1  | drop
#0. 2296: V:0  | return
i32.add() =>
>>> running export "i32.sub":
#0. 2300: V:0  | i32.const 1
#0. 2308: V:1  | i32.const 2
#0. 2316: V:2  | i32.sub 1, 2
#0. 2320: V:1  | drop
#0. 2324: V:0  | return
i32.sub() =>
>>> running export "i32.mul":
#0. 2328: V:0  | i32.const 1
#0. 2336: V:1  | i32.const 2
#0. 2344: V:2  | i32.mul 1, 2
#0. 2348: V:1  | drop
#0. 2352: V:0  | return
i32.mul() =>
>>> running export "i32.div_s":
#0. 2356: V:0  | i32.const 1
#0. 2364: V:1  | i32.const 2
#0. 2372: V:2  | i32.div_s 1, 2
#0. 2376: V:1  | drop
#0. 2380: V:0  | return
i32.div_s() =>
>>> running export "i32.div_u":
#0. 2384: V:0  | i32.const 1
#0. 2392: V:1  | i32.const 2
#0. 2400: V:2  | i32.div_u 1, 2
#0. 2404: V:1  | drop
#0. 2408: V:0  | return
i32.div_u() =>
>>> running export "i32.rem_s":
#0. 2412: V:0  | i32.const 1
#0. 2420: V:1  | i32.const 2
#0. 2428: V:2  | i32.rem_s 1, 2
#0. 2432: V:1  | drop
#0. 2436: V:0  | return
i32.rem_s() =>
>>> running export "i32.rem_u":
#0. 2440: V:0  | i32.const 1
#0. 2448: V:1  | i32.const 2
#0. 2456: V:2  | i32.rem_u 1, 2
#0. 2460: V:1  | drop
#0. 2464: V:0  | return
i32.rem_u() =>
>>> running export "i32.and":
#0. 2468: V:0  | i32.const 1
#0. 2476: V:1  | i32.const 2
#0. 2484: V:2  | i32.and 1, 2
#0. 2488: V:1  | drop
#0. 2492: V:0  | return
i32.and() =>
>>> running export "i32.or":
#0. 2496: V:0  | i32.const 1
#0. 2504: V:1  | i32.const 2
#0. 2512: V:2  | i32.or 1, 2
#0. 2516: V:1  | drop
#0. 2520: V:0  | return
i32.or() =>
>>> running export "i32.xor":
#0. 2524: V:0  | i32.const 1
#0. 2532: V:1  | i32.const 2
#0. 2540: V:2  | i32.xor 1, 2
#0. 2544: V:1  | drop
#0. 2548: V:0  | return
i32.xor() =>
>>> running export "i32.shl":
#0. 2552: V:0  | i32.const 1
#0. 2560: V:1  | i32.const 2
#0. 2568: V:2  | i32.shl 1, 2
#0. 2572: V:1  | drop
#0. 2576: V:0  | return
i32.shl() =>
>>> running export "i32.shr_s":
#0. 2580: V:0  | i32.const 1
#0. 2588: V:1  | i32.const 2
#0. 2596: V:2  | i32.shr_s 1, 2
#0. 2600: V:1  | drop
#0. 2604: V:0  | return
i32.shr_s() =>
>>> running export "i32.shr_u":
#0. 2608: V:0  | i32.const 1
#0. 2616: V:1  | i32.const 2
#0. 2624: V:2  | i32.shr_u 1, 2
#0. 2628: V:1  | drop
#0. 2632: V:0  | return
i32.shr_u() =>
>>> running export "i32.rotl":
#0. 2636: V:0  | i32.const 1
#0. 2644: V:1  | i32.const 2
#0. 2652: V:2  | i32.rotl 1, 2
#0. 2656: V:1  | drop
#0. 2660: V:0  | return
i32.rotl() =>
>>> running export "i32.rotr":
#0. 2664: V:0  | i32.const 1
#0. 2672: V:1  | i32.const 2
#0. 2680: V:2  | i32.rotr 1, 2
#0. 2684: V:1  | drop
#0. 2688: V:0  | return
i32.rotr() =>
>>> running export "i64.clz":
#0. 2692: V:0  | i64.const 1
#0. 2704: V:1  | i64.clz 1
#0. 2708: V:1  | drop
#0. 2712: V:0  | return
i64.clz() =>
>>> running export "i64.ctz":
#0. 2716: V:0  | i64.const 1
#0. 2728: V:1  | i64.ctz 1
#0. 2732: V:1  | drop
#0. 2736: V:0  | return
i64.ctz() =>
>>> running export "i64.popcnt":
#0. 2740: V:0  | i64.const 1
#0. 2752: V:1  | i64.popcnt 1
#0. 2756: V:1  | drop
#0. 2760: V:0  | return
i64.popcnt() =>
>>> running export "i64.add":
#0. 2764: V:0  | i64.const 1
#0. 2776: V:1  | i64.const 2
#0. 2788: V:2  | i64.add 1, 2
#0. 2792: V:1  | drop
#0. 2796: V:0  | return
i64.add() =>
>>> running export "i64.sub":
#0. 2800: V:0  | i64.const 1
#0. 2812: V:1  | i64.const 2
#0. 2824: V:2  | i64.sub 1, 2
#0. 2828: V:1  | drop
#0. 2832: V:0  | return
i64.sub() =>
>>> running export "i64.mul":
#0. 2836: V:0  | i64.const 1
#0. 2848: V:1  | i64.const 2
#0. 2860: V:2  | i64.mul 1, 2
#0. 2864: V:1  | drop
#0. 2868: V:0  | return
i64.mul() =>
>>> running export "i64.div_s":
#0. 2872: V:0  | i64.const 1
#0. 2884: V:1  | i64.const 2
#0. 2896: V:2  | i64.div_s 1, 2
#0. 2900: V:1  | drop
#0. 2904: V:0  | return
i64.div_s() =>
>>> running export "i64.div_u":
#0. 2908: V:0  | i64.const 1
#0. 2920: V:1  | i64.const 2
#0. 2932: V:2  | i64.div_u 1, 2
#0. 2936: V:1  | drop
#0. 2940: V:0  | return
i64.div_u() =>
>>> running export "i64.rem_s":
#0. 2944: V:0  | i64.const 1
#0. 2956: V:1  | i64.const 2
#0. 2968: V:2  | i64.rem_s 1, 2
#0. 2972: V:1  | drop
#0. 2976: V:0  | return
i64.rem_s() =>
>>> running export "i64.rem_u":
#0. 2980: V:0  | i64.const 1
#0. 2992: V:1  | i64.const 2
#0. 3004: V:2  | i64.rem_u 1, 2
#0. 3008: V:1  | drop
#0. 3012: V:0  | return
i64.rem_u() =>
>>> running export "i64.and":
#0. 3016: V:0  | i64.const 1
#0. 3028: V:1  | i64.const 2
#0. 3040: V:2  | i64.and 1, 2
#0. 3044: V:1  | drop
#0. 3048: V:0  | return
i64.and() =>
>>> running export "i64.or":
#0. 3052: V:0  | i64.const 1
#0. 3064: V:1  | i64.const 2
#0. 3076: V:2  | i64.or 1, 2
#0. 3080: V:1  | drop
#0. 3084: V:0  | return
i64.or() =>
>>> running export "i64.xor":
#0. 3088: V:0  | i64.const 1
#0. 3100: V:1  | i64.const 2
#0. 3112: V:2  | i64.xor 1, 2
#0. 3116: V:1  | drop
#0. 3120: V:0  | return
i64.xor() =>
>>> running export "i64.shl":
#0. 3124: V:0  | i64.const 1
#0. 3136: V:1  | i64.const 2
#0. 3148: V:2  | i64.shl 1, 2
#0. 3152: V:1  | drop
#0. 3156: V:0  | return
i64.shl() =>
>>> running export "i64.shr_s":
#0. 3160: V:0  | i64.const 1
#0. 3172: V:1  | i64.const 2
#0. 3184: V:2  | i64.shr_s 1, 2
#0. 3188: V:1  | drop
#0. 3192: V:0  | return
i64.shr_s() =>
>>> running export "i64.shr_u":
#0. 3196: V:0  | i64.const 1
#0. 3208: V:1  | i64.const 2
#0. 3220: V:2  | i64.shr_u 1, 2
#0. 3224: V:1  | drop
#0. 3228: V:0  | return
i64.shr_u() =>
>>> running export "i64.rotl":
#0. 3232: V:0  | i64.const 1
#0. 3244: V:1  | i64.const 2
#0. 3256: V:2  | i64.rotl 1, 2
#0. 3260: V:1  | drop
#0. 3264: V:0  | return
i64.rotl() =>
>>> running export "i64.rotr":
#0. 3268: V:0  | i64.const 1
#0. 3280: V:1  | i64.const 2
#0. 3292: V:2  | i64.rotr 1, 2
#0. 3296: V:1  | drop
#0. 3300: V:0  | return
i64.rotr() =>
>>> running export "f32.abs":
#0. 3304: V:0  | f32.const 1
#0. 3312: V:1  | f32.abs 1
#0. 3316: V:1  | drop
#0. 3320: V:0  | return
f32.abs() =>
>>> running export "f32.neg":
#0. 3324: V:0  | f32.const 1
#0. 3332: V:1  | f32.neg 1
#0. 3336: V:1  | drop
#0. 3340: V:0  | return
f32.neg() =>
>>> running export "f32.ceil":
#0. 3344: V:0  | f32.const 1
#0. 3352: V:1  | f32.ceil 1
#0. 3356: V:1  | drop
#0. 3360: V:0  | return
f32.ceil() =>
>>> running export "f32.floor":
#0. 3364: V:0  | f32.const 1
#0. 3372: V:1  | f32.floor 1
#0. 3376: V:1  | drop
#0. 3380: V:0  | return
f32.floor() =>
>>> running export "f32.trunc":
#0. 3384: V:0  | f32.const 1
#0. 3392: V:1  | f32.trunc 1
#0. 3396: V:1  | drop
#0. 3400: V:0  | return
f32.trunc() =>
>>> running export "f32.nearest":
#0. 3404: V:0  | f32.const 1
#0. 3412: V:1  | f32.nearest 1
#0. 3416: V:1  | drop
#0. 3420: V:0  | return
f32.nearest() =>
>>> running export "f32.sqrt":
#0. 3424: V:0  | f32.const 1
#0. 3432: V:1  | f32.sqrt 1
#0. 3436: V:1  | drop
#0. 3440: V:0  | return
f32.sqrt() =>
>>> running export "f32.add":
#0. 3444: V:0  | f32.const 1
#0. 3452: V:1  | f32.const 2
#0. 3460: V:2  | f32.add 1, 2
#0. 3464: V:1  | drop
#0. 3468: V:0  | return
f32.add() =>
>>> running export "f32.sub":
#0. 3472: V:0  | f32.const 1
#0. 3480: V:1  | f32.const 2
#0. 3488: V:2  | f32.sub 1, 2
#0. 3492: V:1  | drop
#0. 3496: V:0  | return
f32.sub() =>
>>> running export "f32.mul":
#0. 3500: V:0  | f32.const 1
#0. 3508: V:1  | f32.const 2
#0. 3516: V:2  | f32.mul 1, 2
#0. 3520: V:1  | drop
#0. 3524: V:0  | return
f32.mul() =>
>>> running export "f32.div":
#0. 3528: V:0  | f32.const 1
#0. 3536: V:1  | f32.const 2
#0. 3544: V:2  | f32.div 1, 2
#0. 3548: V:1  | drop
#0. 3552: V:0  | return
f32.div() =>
>>> running export "f32.min":
#0. 3556: V:0  | f32.const 1
#0. 3564: V:1  | f32.const 2
#0. 3572: V:2  | f32.min 1, 2
#0. 3576: V:1  | drop
#0. 3580: V:0  | return
f32.min() =>
>>> running export "f32.max":
#0. 3584: V:0  | f32.const 1
#0. 3592: V:1  | f32.const 2
#0. 3600: V:2  | f32.max 1, 2
#0. 3604: V:1  | drop
#0. 3608: V:0  | return
f32.max() =>
>>> running export "f32.copysign":
#0. 3612: V:0  | f32.const 1
#0. 3620: V:1  | f32.const 2
#0. 3628: V:2  | f32.copysign 1, 2
#0. 3632: V:1  | drop
#0. 3636: V:0  | return
f32.copysign() =>
>>> running export "f64.abs":
#0. 3640: V:0  | f64.const 1
#0. 3652: V:1  | f64.abs 1
#0. 3656: V:1  | drop
#0. 3660: V:0  | return
f64.abs() =>
>>> running export "f64.neg":
#0. 3664: V:0  | f64.const 1
#0. 3676: V:1  | f64.neg 1
#0. 3680: V:1  | drop
#0. 3684: V:0  | return
f64.neg() =>
>>> running export "f64.ceil":
#0. 3688: V:0  | f64.const 1
#0. 3700: V:1  | f64.ceil 1
#0. 3704: V:1  | drop
#0. 3708: V:0  | return
f64.ceil() =>
>>> running export "f64.floor":
#0. 3712: V:0  | f64.const 1
#0. 3724: V:1  | f64.floor 1
#0. 3728: V:1  | drop
#0. 3732: V:0  | return
f64.floor() =>
>>> running export "f64.trunc":
#0. 3736: V:0  | f64.const 1
#0. 3748: V:1  | f64.trunc 1
#0. 3752: V:1  | drop
#0. 3756: V:0  | return
f64.trunc() =>
>>> running export "f64.nearest":
#0. 3760: V:0  | f64.const 1
#0. 3772: V:1  | f64.nearest 1
#0. 3776: V:1  | drop
#0. 3780: V:0  | return
f64.nearest() =>
>>> running export "f64.sqrt":
#0. 3784: V:0  | f64.const 1
#0. 3796: V:1  | f64.sqrt 1
#0. 3800: V:1  | drop
#0. 3804: V:0  | return
f64.sqrt() =>
>>> running export "f64.add":
#0. 3808: V:0  | f64.const 1
#0. 3820: V:1  | f64.const 2
#0. 3832: V:2  | f64.add 1, 2
#0. 3836: V:1  | drop
#0. 3840: V:0  | return
f64.add() =>
>>> running export "f64.sub":
#0. 3844: V:0  | f64.const 1
#0. 3856: V:1  | f64.const 2
#0. 3868: V:2  | f64.sub 1, 2
#0. 3872: V:1  | drop
#0. 3876: V:0  | return
f64.sub() =>
>>> running export "f64.mul":
#0. 3880: V:0  | f64.const 1
#0. 3892: V:1  | f64.const 2
#0. 3904: V:2  | f64.mul 1, 2
#0. 3908: V:1  | drop
#0. 3912: V:0  | return
f64.mul() =>
>>> running export "f64.div":
#0. 3916: V:0  | f64.const 1
#0. 3928: V:1  | f64.const 2
#0. 3940: V:2  | f64.div 1, 2
#0. 3944: V:1  | drop
#0. 3948: V:0  | return
f64.div() =>
>>> running export "f64.min":
#0. 3952: V:0  | f64.const 1
#0. 3964: V:1  | f64.const 2
#0. 3976: V:2  | f64.min 1, 2
#0. 3980: V:1  | drop
#0. 3984: V:0  | return
f64.min() =>
>>> running export "f64.max":
#0. 3988: V:0  | f64.const 1
#0. 4000: V:1  | f64.const 2
#0. 4012: V:2  | f64.max 1, 2
#0. 4016: V:1  | drop
#0. 4020: V:0  | return
f64.max() =>
>>> running export "f64.copysign":
#0. 4024: V:0  | f64.const 1
#0. 4036: V:1  | f64.const 2
#0. 4048: V:2  | f64.copysign 1, 2
#0. 4052: V:1  | drop
#0. 4056: V:0  | return
f64.copysign() =>
>>> running export "i32.wrap/i64":
#0. 4060: V:0  | i64.const 1
#0. 4072: V:1  | i32.wrap_i64 1
#0. 4076: V:1  | drop
#0. 4080: V:0  | return
i32.wrap/i64() =>
>>> running export "i32.trunc_s/f32":
#0. 4084: V:0  | f32.const 1
#0. 4092: V:1  | i32.trunc_f32_s 1
#0. 4096: V:1  | drop
#0. 4100: V:0  | return
i32.trunc_s/f32() =>
>>> running export "i32.trunc_u/f32":
#0. 4104: V:0  | f32.const 1
#0. 4112: V:1  | i32.trunc_f32_u 1
#0. 4116: V:1  | drop
#0. 4120: V:0  | return
i32.trunc_u/f32() =>
>>> running export "i32.trunc_s/f64":
#0. 4124: V:0  | f64.const 1
#0. 4136: V:1  | i32.trunc_f64_s 1
#0. 4140: V:1  | drop
#0. 4144: V:0  | return
i32.trunc_s/f64() =>
>>> running export "i32.trunc_u/f64":
#0. 4148: V:0  | f64.const 1
#0. 4160: V:1  | i32.trunc_f64_u 1
#0. 4164: V:1  | drop
#0. 4168: V:0  | return
i32.trunc_u/f64() =>
>>> running export "i64.extend_s/i32":
#0. 4172: V:0  | i32.const 1
#0. 4180: V:1  | i64.extend_i32_s 1
#0. 4184: V:1  | drop
#0. 4188: V:0  | return
i64.extend_s/i32() =>
>>> running export "i64.extend_u/i32":
#0. 4192: V:0  | i32.const 1
#0. 4200: V:1  | i64.extend_i32_u 1
#0. 4204: V:1  | drop
#0. 4208: V:0  | return
i64.extend_u/i32() =>
>>> running export "i64.trunc_s/f32":
#0. 4212: V:0  | f32.const 1
#0. 4220: V:1  | i64.trunc_f32_s 1
#0. 4224: V:1  | drop
#0. 4228: V:0  | return
i64.trunc_s/f32() =>
>>> running export "i64.trunc_u/f32":
#0. 4232: V:0  | f32.const 1
#0. 4240: V:1  | i64.trunc_f32_u 1
#0. 4244: V:1  | drop
#0. 4248: V:0  | return
i64.trunc_u/f32() =>
>>> running export "i64.trunc_s/f64":
#0. 4252: V:0  | f64.const 1
#0. 4264: V:1  | i64.trunc_f64_s 1
#0. 4268: V:1  | drop
#0. 4272: V:0  | return
i64.trunc_s/f64() =>
>>> running export "i64.trunc_u/f64":
#0. 4276: V:0  | f64.const 1
#0. 4288: V:1  | i64.trunc_f64_u 1
#0. 4292: V:1  | drop
#0. 4296: V:0  | return
i64.trunc_u/f64() =>
>>> running export "f32.convert_s/i32":
#0. 4300: V:0  | i32.const 1
#0. 4308: V:1  | f32.convert_i32_s 1
#0. 4312: V:1  | drop
#0. 4316: V:0  | return
f32.convert_s/i32() =>
>>> running export "f32.convert_u/i32":
#0. 4320: V:0  | i32.const 1
#0. 4328: V:1  | f32.convert_i32_u 1
#0. 4332: V:1  | drop
#0. 4336: V:0  | return
f32.convert_u/i32() =>
>>> running export "f32.convert_s/i64":
#0. 4340: V:0  | i64.const 1
#0. 4352: V:1  | f32.convert_i64_s 1
#0. 4356: V:1  | drop
#0. 4360: V:0  | return
f32.convert_s/i64() =>
>>> running export "f32.convert_u/i64":
#0. 4364: V:0  | i64.const 1
#0. 4376: V:1  | f32.convert_i64_u 1
#0. 4380: V:1  | drop
#0. 4384: V:0  | return
f32.convert_u/i64() =>
>>> running export "f32.demote/f64":
#0. 4388: V:0  | f64.const 1
#0. 4400: V:1  | f32.demote_f64 1
#0. 4404: V:1  | drop
#0. 4408: V:0  | return
f32.demote/f64() =>
>>> running export "f64.convert_s/i32":
#0. 4412: V:0  | i32.const 1
#0. 4420: V:1  | f64.convert_i32_s 1
#0. 4424: V:1  | drop
#0. 4428: V:0  | return
f64.convert_s/i32() =>
>>> running export "f64.convert_u/i32":
#0. 4432: V:0  | i32.const 1
#0. 4440: V:1  | f64.convert_i32_u 1
#0. 4444: V:1  | drop
#0. 4448: V:0  | return
f64.convert_u/i32() =>
>>> running export "f64.convert_s/i64":
#0. 4452: V:0  | i64.const 1
#0. 4464: V:1  | f64.convert_i64_s 1
#0. 4468: V:1  | drop
#0. 4472: V:0  | return
f64.convert_s/i64() =>
>>> running export "f64.convert_u/i64":
#0. 4476: V:0  | i64.const 1
#0. 4488: V:1  | f64.convert_i64_u 1
#0. 4492: V:1  | drop
#0. 4496: V:0  | return
f64.convert_u/i64() =>
>>> running export "f64.promote/f32":
#0. 4500: V:0  | f32.const 1
#0. 4508: V:1  | f64.promote_f32 1
#0. 4512: V:1  | drop
#0. 4516: V:0  | return
f64.promote/f32() =>
>>> running export "i32.reinterpret/f32":
#0. 4520: V:0  | i32.const 1
#0. 4528: V:1  | f32.reinterpret_i32 1
#0. 4532: V:1  | drop
#0. 4536: V:0  | return
i32.reinterpret/f32() =>
>>> running export "f32.reinterpret/i32":
#0. 4540: V:0  | f32.const 1
#0. 4548: V:1  | i32.reinterpret_f32 1
#0. 4552: V:1  | drop
#0. 4556: V:0  | return
f32.reinterpret/i32() =>
>>> running export "i64.reinterpret/f64":
#0. 4560: V:0  | i64.const 1
#0. 4572: V:1  | f64.reinterpret_i64 1
#0. 4576: V:1  | drop
#0. 4580: V:0  | return
i64.reinterpret/f64() =>
>>> running export "f64.reinterpret/i64":
#0. 4584: V:0  | f64.const 1
#0. 4596: V:1  | i64.reinterpret_f64 1
#0. 4600: V:1  | drop
#0. 4604: V:0  | return
f64.reinterpret/i64() =>
>>> running export "i32.extend8_s":
#0. 4608: V:0  | i32.const 1
#0. 4616: V:1  | i32.extend8_s 1
#0. 4620: V:1  | drop
#0. 4624: V:0  | return
i32.extend8_s() =>
>>> running export "i32.extend16_s":
#0. 4628: V:0  | i32.const 1
#0. 4636: V:1  | i32.extend16_s 1
#0. 4640: V:1  | drop
#0. 4644: V:0  | return
i32.extend16_s() =>
>>> running export "i64.extend8_s":
#0. 4648: V:0  | i64.const 1
#0. 4660: V:1  | i64.extend8_s 1
#0. 4664: V:1  | drop
#0. 4668: V:0  | return
i64.extend8_s() =>
>>> running export "i64.extend16_s":
#0. 4672: V:0  | i64.const 1
#0. 4684: V:1  | i64.extend16_s 1
#0. 4688: V:1  | drop
#0. 4692: V:0  | return
i64.extend16_s() =>
>>> running export "i64.extend32_s":
#0. 4696: V:0  | i64.const 1
#0. 4708: V:1  | i64.extend32_s 1
#0. 4712: V:1  | drop
#0. 4716: V:0  | return
i64.extend32_s() =>
>>> running export "alloca":
#0. 4720: V:0  | alloca $1
#0. 4728: V:1  | drop
#0. 4732: V:0  | return
alloca() =>
>>> running export "br_unless":
#0. 4736: V:0  | i32.const 1
#0. 4744: V:1  | br_unless @4760, 1
#0. 4752: V:0  | br @4760
#0. 4760: V:0  | return
br_unless() =>
>>> running export "call_host":
#0. 4764: V:0  | i32.const 1
#0. 4772: V:1  | call_host $0
called host host.print(i32:1) =>
#0. 4780: V:0  | return
call_host() =>
>>> running export "drop_keep":
#0. 4784: V:0  | i32.const 1
#0. 4792: V:1  | i32.const 2
#0. 4800: V:2  | drop_keep $1 $1
#0. 4812: V:1  | br @4820
#0. 4820: V:1  | drop
#0. 4824: V:0  | return
drop_keep() =>
>>> running export "i32.trunc_s:sat/f32":
#0. 4828: V:0  | f32.const 1
#0. 4836: V:1  | i32.trunc_sat_f32_s 1
#0. 4840: V:1  | drop
#0. 4844: V:0  | return
i32.trunc_s:sat/f32() =>
>>> running export "i32.trunc_u:sat/f32":
#0. 4848: V:0  | f32.const 1
#0. 4856: V:1  | i32.trunc_sat_f32_u 1
#0. 4860: V:1  | drop
#0. 4864: V:0  | return
i32.trunc_u:sat/f32() =>
>>> running export "i32.trunc_s:sat/f64":
#0. 4868: V:0  | f64.const 1
#0. 4880: V:1  | i32.trunc_sat_f64_s 1
#0. 4884: V:1  | drop
#0. 4888: V:0  | return
i32.trunc_s:sat/f64() =>
>>> running export "i32.trunc_u:sat/f64":
#0. 4892: V:0  | f64.const 1
#0. 4904: V:1  | i32.trunc_sat_f64_u 1
#0. 4908: V:1  | drop
#0. 4912: V:0  | return
i32.trunc_u:sat/f64() =>
>>> running export "i64.trunc_s:sat/f32":
#0. 4916: V:0  | f32.const 1
#0. 4924: V:1  | i64.trunc_sat_f32_s 1
#0. 4928: V:1  | drop
#0. 4932: V:0  | return
i64.trunc_s:sat/f32() =>
>>> running export "i64.trunc_u:sat/f32":
#0. 4936: V:0  | f32.const 1
#0. 4944: V:1  | i64.trunc_sat_f32_u 1
#0. 4948: V:1  | drop
#0. 4952: V:0  | return
i64.trunc_u:sat/f32() =>
>>> running export "i64.trunc_s:sat/f64":
#0. 4956: V:0  | f64.const 1
#0. 4968: V:1  | i64.trunc_sat_f64_s 1
#0. 4972: V:1  | drop
#0. 4976: V:0  | return
i64.trunc_s:sat/f64() =>
>>> running export "i64.trunc_u:sat/f64":
#0. 4980: V:0  | f64.const 1
#0. 4992: V:1  | i64.trunc_sat_f64_u 1
#0. 4996: V:1  | drop
#0. 5000: V:0  | return
i64.trunc_u:sat/f64() =>
>>> running export "memory.init":
#0. 5004: V:0  | i32.const 1
#0. 5012: V:1  | i32.const 2
#0. 5020: V:2  | i32.const 3
#0. 5028: V:3  | memory.init $0, $0
memory.init() => error: out of bounds memory access: memory.init out of bounds
>>> running export "data.drop":
#0. 5044: V:0  | data.drop $0
#0. 5052: V:0  | return
data.drop() =>
>>> running export "memory.copy":
#0. 5056: V:0  | i32.const 1
#0. 5064: V:1  | i32.const 2
#0. 5072: V:2  | i32.const 3
#0. 5080: V:3  | memory.copy $0
#0. 5088: V:0  | return
memory.copy() =>
>>> running export "memory.fill":
#0. 5092: V:0  | i32.const 1
#0. 5100: V:1  | i32.const 2
#0. 5108: V:2  | i32.const 3
#0. 5116: V:3  | memory.fill $0
#0. 5124: V:0  | return
memory.fill() =>
>>> running export "table.init":
#0. 5128: V:0  | i32.const 1
#0. 5136: V:1  | i32.const 2
#0. 5144: V:2  | i32.const 3
#0. 5152: V:3  | table.init $0, $0
table.init() => error: out of bounds table access: table.init out of bounds
>>> running export "elem.drop":
#0. 5168: V:0  | elem.drop $0
#0. 5176: V:0  | return
elem.drop() =>
>>> running export "table.copy":
#0. 5180: V:0  | i32.const 1
#0. 5188: V:1  | i32.const 2
#0. 5196: V:2  | i32.const 3
#0. 5204: V:3  | table.copy $0
table.copy() => error: out of bounds table access: table.copy out of bounds
>>> running export "v128.load":
#0. 5220: V:0  | i32.const 1
#0. 5228: V:1  | v128.load $0:1+$3
#0. 5240: V:1  | drop
#0. 5244: V:0  | return
v128.load() =>
>>> running export "v128.store":
#0. 5248: V:0  | i32.const 1
#0. 5256: V:1  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5276: V:2  | v128.store $0:1+$3, $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5288: V:0  | return
v128.store() =>
>>> running export "v128.const":
#0. 5292: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5312: V:1  | drop
#0. 5316: V:0  | return
v128.const() =>
>>> running export "v8x16.shuffle":
#0. 5320: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5340: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 5360: V:2  | v8x16.shuffle $0x00000001 00000001 00000001 00000001 $0x00000002 00000002 00000002 00000002 : with lane imm: $0x01010101 01010101 01010101 01010101
#0. 5380: V:1  | drop
#0. 5384: V:0  | return
v8x16.shuffle() =>
>>> running export "i8x16.splat":
#0. 5388: V:0  | i32.const 1
#0. 5396: V:1  | i8x16.splat 1
#0. 5400: V:1  | drop
#0. 5404: V:0  | return
i8x16.splat() =>
>>> running export "i8x16.extract_lane_s":
#0. 5408: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5428: V:1  | i8x16.extract_lane_s : LaneIdx 15 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5433: V:1  | drop
#0. 5437: V:0  | return
i8x16.extract_lane_s() =>
>>> running export "i8x16.extract_lane_u":
#0. 5441: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5461: V:1  | i8x16.extract_lane_u : LaneIdx 15 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5466: V:1  | drop
#0. 5470: V:0  | return
i8x16.extract_lane_u() =>
>>> running export "i8x16.replace_lane":
#0. 5474: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5494: V:1  | i32.const 0
#0. 5502: V:2  | i8x16.replace_lane : Set 0 to LaneIdx 15 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5507: V:1  | drop
#0. 5511: V:0  | return
i8x16.replace_lane() =>
>>> running export "i16x8.splat":
#0. 5515: V:0  | i32.const 1
#0. 5523: V:1  | i16x8.splat 1
#0. 5527: V:1  | drop
#0. 5531: V:0  | return
i16x8.splat() =>
>>> running export "i16x8.extract_lane_s":
#0. 5535: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5555: V:1  | i16x8.extract_lane_s : LaneIdx 7 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5560: V:1  | drop
#0. 5564: V:0  | return
i16x8.extract_lane_s() =>
>>> running export "i16x8.extract_lane_u":
#0. 5568: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5588: V:1  | i16x8.extract_lane_u : LaneIdx 7 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5593: V:1  | drop
#0. 5597: V:0  | return
i16x8.extract_lane_u() =>
>>> running export "i16x8.replace_lane":
#0. 5601: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5621: V:1  | i32.const 0
#0. 5629: V:2  | i16x8.replace_lane : Set 0 to LaneIdx 7 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5634: V:1  | drop
#0. 5638: V:0  | return
i16x8.replace_lane() =>
>>> running export "i32x4.splat":
#0. 5642: V:0  | i32.const 1
#0. 5650: V:1  | i32x4.splat 1
#0. 5654: V:1  | drop
#0. 5658: V:0  | return
i32x4.splat() =>
>>> running export "i32x4.extract_lane":
#0. 5662: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5682: V:1  | i32x4.extract_lane : LaneIdx 3 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5687: V:1  | drop
#0. 5691: V:0  | return
i32x4.extract_lane() =>
>>> running export "i32x4.replace_lane":
#0. 5695: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5715: V:1  | i32.const 0
#0. 5723: V:2  | i32x4.replace_lane : Set 0 to LaneIdx 3 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5728: V:1  | drop
#0. 5732: V:0  | return
i32x4.replace_lane() =>
>>> running export "i64x2.splat":
#0. 5736: V:0  | i64.const 1
#0. 5748: V:1  | i64x2.splat 1
#0. 5752: V:1  | drop
#0. 5756: V:0  | return
i64x2.splat() =>
>>> running export "i64x2.extract_lane":
#0. 5760: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5780: V:1  | i64x2.extract_lane : LaneIdx 1 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5785: V:1  | drop
#0. 5789: V:0  | return
i64x2.extract_lane() =>
>>> running export "i64x2.replace_lane":
#0. 5793: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5813: V:1  | i64.const 0
#0. 5825: V:2  | i64x2.replace_lane : Set 0 to LaneIdx 1 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5830: V:1  | drop
#0. 5834: V:0  | return
i64x2.replace_lane() =>
>>> running export "f32x4.splat":
#0. 5838: V:0  | f32.const 1
#0. 5846: V:1  | f32x4.splat 1
#0. 5850: V:1  | drop
#0. 5854: V:0  | return
f32x4.splat() =>
>>> running export "f32x4.extract_lane":
#0. 5858: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5878: V:1  | f32x4.extract_lane : LaneIdx 3 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5883: V:1  | drop
#0. 5887: V:0  | return
f32x4.extract_lane() =>
>>> running export "f32x4.replace_lane":
#0. 5891: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5911: V:1  | f32.const 0
#0. 5919: V:2  | f32x4.replace_lane : Set 0 to LaneIdx 3 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5924: V:1  | drop
#0. 5928: V:0  | return
f32x4.replace_lane() =>
>>> running export "f64x2.splat":
#0. 5932: V:0  | f64.const 1
#0. 5944: V:1  | f64x2.splat 1
#0. 5948: V:1  | drop
#0. 5952: V:0  | return
f64x2.splat() =>
>>> running export "f64x2.extract_lane":
#0. 5956: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 5976: V:1  | f64x2.extract_lane : LaneIdx 1 From $0x00000001 0x00000001 0x00000001 0x00000001
#0. 5981: V:1  | drop
#0. 5985: V:0  | return
f64x2.extract_lane() =>
>>> running export "f64x2.replace_lane":
#0. 5989: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6009: V:1  | f64.const 0
#0. 6021: V:2  | f64x2.replace_lane : Set 0 to LaneIdx 1 In $0x00000001 0x00000001 0x00000001 0x00000001
#0. 6026: V:1  | drop
#0. 6030: V:0  | return
f64x2.replace_lane() =>
>>> running export "i8x16.eq":
#0. 6034: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6054: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6074: V:2  | i8x16.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6078: V:1  | drop
#0. 6082: V:0  | return
i8x16.eq() =>
>>> running export "i8x16.ne":
#0. 6086: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6106: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6126: V:2  | i8x16.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6130: V:1  | drop
#0. 6134: V:0  | return
i8x16.ne() =>
>>> running export "i8x16.lt_s":
#0. 6138: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6158: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6178: V:2  | i8x16.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6182: V:1  | drop
#0. 6186: V:0  | return
i8x16.lt_s() =>
>>> running export "i8x16.lt_u":
#0. 6190: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6210: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6230: V:2  | i8x16.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6234: V:1  | drop
#0. 6238: V:0  | return
i8x16.lt_u() =>
>>> running export "i8x16.gt_s":
#0. 6242: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6262: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6282: V:2  | i8x16.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6286: V:1  | drop
#0. 6290: V:0  | return
i8x16.gt_s() =>
>>> running export "i8x16.gt_u":
#0. 6294: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6314: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6334: V:2  | i8x16.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6338: V:1  | drop
#0. 6342: V:0  | return
i8x16.gt_u() =>
>>> running export "i8x16.le_s":
#0. 6346: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6366: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6386: V:2  | i8x16.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6390: V:1  | drop
#0. 6394: V:0  | return
i8x16.le_s() =>
>>> running export "i8x16.le_u":
#0. 6398: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6418: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6438: V:2  | i8x16.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6442: V:1  | drop
#0. 6446: V:0  | return
i8x16.le_u() =>
>>> running export "i8x16.ge_s":
#0. 6450: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6470: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6490: V:2  | i8x16.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6494: V:1  | drop
#0. 6498: V:0  | return
i8x16.ge_s() =>
>>> running export "i8x16.ge_u":
#0. 6502: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6522: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6542: V:2  | i8x16.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6546: V:1  | drop
#0. 6550: V:0  | return
i8x16.ge_u() =>
>>> running export "i16x8.eq":
#0. 6554: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6574: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6594: V:2  | i16x8.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6598: V:1  | drop
#0. 6602: V:0  | return
i16x8.eq() =>
>>> running export "i16x8.ne":
#0. 6606: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6626: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6646: V:2  | i16x8.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6650: V:1  | drop
#0. 6654: V:0  | return
i16x8.ne() =>
>>> running export "i16x8.lt_s":
#0. 6658: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6678: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6698: V:2  | i16x8.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6702: V:1  | drop
#0. 6706: V:0  | return
i16x8.lt_s() =>
>>> running export "i16x8.lt_u":
#0. 6710: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6730: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6750: V:2  | i16x8.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6754: V:1  | drop
#0. 6758: V:0  | return
i16x8.lt_u() =>
>>> running export "i16x8.gt_s":
#0. 6762: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6782: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6802: V:2  | i16x8.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6806: V:1  | drop
#0. 6810: V:0  | return
i16x8.gt_s() =>
>>> running export "i16x8.gt_u":
#0. 6814: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6834: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6854: V:2  | i16x8.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6858: V:1  | drop
#0. 6862: V:0  | return
i16x8.gt_u() =>
>>> running export "i16x8.le_s":
#0. 6866: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6886: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6906: V:2  | i16x8.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6910: V:1  | drop
#0. 6914: V:0  | return
i16x8.le_s() =>
>>> running export "i16x8.le_u":
#0. 6918: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6938: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 6958: V:2  | i16x8.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 6962: V:1  | drop
#0. 6966: V:0  | return
i16x8.le_u() =>
>>> running export "i16x8.ge_s":
#0. 6970: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 6990: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7010: V:2  | i16x8.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7014: V:1  | drop
#0. 7018: V:0  | return
i16x8.ge_s() =>
>>> running export "i16x8.ge_u":
#0. 7022: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7042: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7062: V:2  | i16x8.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7066: V:1  | drop
#0. 7070: V:0  | return
i16x8.ge_u() =>
>>> running export "i32x4.eq":
#0. 7074: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7094: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7114: V:2  | i32x4.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7118: V:1  | drop
#0. 7122: V:0  | return
i32x4.eq() =>
>>> running export "i32x4.ne":
#0. 7126: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7146: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7166: V:2  | i32x4.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7170: V:1  | drop
#0. 7174: V:0  | return
i32x4.ne() =>
>>> running export "i32x4.lt_s":
#0. 7178: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7198: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7218: V:2  | i32x4.lt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7222: V:1  | drop
#0. 7226: V:0  | return
i32x4.lt_s() =>
>>> running export "i32x4.lt_u":
#0. 7230: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7250: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7270: V:2  | i32x4.lt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7274: V:1  | drop
#0. 7278: V:0  | return
i32x4.lt_u() =>
>>> running export "i32x4.gt_s":
#0. 7282: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7302: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7322: V:2  | i32x4.gt_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7326: V:1  | drop
#0. 7330: V:0  | return
i32x4.gt_s() =>
>>> running export "i32x4.gt_u":
#0. 7334: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7354: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7374: V:2  | i32x4.gt_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7378: V:1  | drop
#0. 7382: V:0  | return
i32x4.gt_u() =>
>>> running export "i32x4.le_s":
#0. 7386: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7406: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7426: V:2  | i32x4.le_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7430: V:1  | drop
#0. 7434: V:0  | return
i32x4.le_s() =>
>>> running export "i32x4.le_u":
#0. 7438: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7458: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7478: V:2  | i32x4.le_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7482: V:1  | drop
#0. 7486: V:0  | return
i32x4.le_u() =>
>>> running export "i32x4.ge_s":
#0. 7490: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7510: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7530: V:2  | i32x4.ge_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7534: V:1  | drop
#0. 7538: V:0  | return
i32x4.ge_s() =>
>>> running export "i32x4.ge_u":
#0. 7542: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7562: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7582: V:2  | i32x4.ge_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7586: V:1  | drop
#0. 7590: V:0  | return
i32x4.ge_u() =>
>>> running export "f32x4.eq":
#0. 7594: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7614: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7634: V:2  | f32x4.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7638: V:1  | drop
#0. 7642: V:0  | return
f32x4.eq() =>
>>> running export "f32x4.ne":
#0. 7646: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7666: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7686: V:2  | f32x4.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7690: V:1  | drop
#0. 7694: V:0  | return
f32x4.ne() =>
>>> running export "f32x4.lt":
#0. 7698: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7718: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7738: V:2  | f32x4.lt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7742: V:1  | drop
#0. 7746: V:0  | return
f32x4.lt() =>
>>> running export "f32x4.gt":
#0. 7750: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7770: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7790: V:2  | f32x4.gt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7794: V:1  | drop
#0. 7798: V:0  | return
f32x4.gt() =>
>>> running export "f32x4.le":
#0. 7802: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7822: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7842: V:2  | f32x4.le $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7846: V:1  | drop
#0. 7850: V:0  | return
f32x4.le() =>
>>> running export "f32x4.ge":
#0. 7854: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7874: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7894: V:2  | f32x4.ge $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7898: V:1  | drop
#0. 7902: V:0  | return
f32x4.ge() =>
>>> running export "f64x2.eq":
#0. 7906: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7926: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7946: V:2  | f64x2.eq $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 7950: V:1  | drop
#0. 7954: V:0  | return
f64x2.eq() =>
>>> running export "f64x2.ne":
#0. 7958: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 7978: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 7998: V:2  | f64x2.ne $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8002: V:1  | drop
#0. 8006: V:0  | return
f64x2.ne() =>
>>> running export "f64x2.lt":
#0. 8010: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8030: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8050: V:2  | f64x2.lt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8054: V:1  | drop
#0. 8058: V:0  | return
f64x2.lt() =>
>>> running export "f64x2.gt":
#0. 8062: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8082: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8102: V:2  | f64x2.gt $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8106: V:1  | drop
#0. 8110: V:0  | return
f64x2.gt() =>
>>> running export "f64x2.le":
#0. 8114: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8134: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8154: V:2  | f64x2.le $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8158: V:1  | drop
#0. 8162: V:0  | return
f64x2.le() =>
>>> running export "f64x2.ge":
#0. 8166: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8186: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8206: V:2  | f64x2.ge $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8210: V:1  | drop
#0. 8214: V:0  | return
f64x2.ge() =>
>>> running export "v128.not":
#0. 8218: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8238: V:1  | v128.not $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8242: V:1  | drop
#0. 8246: V:0  | return
v128.not() =>
>>> running export "v128.and":
#0. 8250: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8270: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8290: V:2  | v128.and $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8294: V:1  | drop
#0. 8298: V:0  | return
v128.and() =>
>>> running export "v128.or":
#0. 8302: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8322: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8342: V:2  | v128.or $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8346: V:1  | drop
#0. 8350: V:0  | return
v128.or() =>
>>> running export "v128.xor":
#0. 8354: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8374: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8394: V:2  | v128.xor $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8398: V:1  | drop
#0. 8402: V:0  | return
v128.xor() =>
>>> running export "v128.bitselect":
#0. 8406: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8426: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8446: V:2  | v128.const i32x4 0x00000003 0x00000003 0x00000003 0x00000003
#0. 8466: V:3  | v128.bitselect $0x00000001 00000001 00000001 00000001 $0x00000002 00000002 00000002 00000002 $0x00000003 00000003 00000003 00000003
#0. 8470: V:1  | drop
#0. 8474: V:0  | return
v128.bitselect() =>
>>> running export "i8x16.neg":
#0. 8478: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8498: V:1  | i8x16.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8502: V:1  | drop
#0. 8506: V:0  | return
i8x16.neg() =>
>>> running export "i8x16.any_true":
#0. 8510: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8530: V:1  | i8x16.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8534: V:1  | drop
#0. 8538: V:0  | return
i8x16.any_true() =>
>>> running export "i8x16.all_true":
#0. 8542: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8562: V:1  | i8x16.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 8566: V:1  | drop
#0. 8570: V:0  | return
i8x16.all_true() =>
>>> running export "i8x16.shl":
#0. 8574: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8594: V:1  | i32.const 0
#0. 8602: V:2  | i8x16.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8606: V:1  | drop
#0. 8610: V:0  | return
i8x16.shl() =>
>>> running export "i8x16.shr_s":
#0. 8614: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8634: V:1  | i32.const 0
#0. 8642: V:2  | i8x16.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8646: V:1  | drop
#0. 8650: V:0  | return
i8x16.shr_s() =>
>>> running export "i8x16.shr_u":
#0. 8654: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8674: V:1  | i32.const 0
#0. 8682: V:2  | i8x16.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 8686: V:1  | drop
#0. 8690: V:0  | return
i8x16.shr_u() =>
>>> running export "i8x16.add":
#0. 8694: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8714: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8734: V:2  | i8x16.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8738: V:1  | drop
#0. 8742: V:0  | return
i8x16.add() =>
>>> running export "i8x16.add_saturate_s":
#0. 8746: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8766: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8786: V:2  | i8x16.add_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8790: V:1  | drop
#0. 8794: V:0  | return
i8x16.add_saturate_s() =>
>>> running export "i8x16.add_saturate_u":
#0. 8798: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8818: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8838: V:2  | i8x16.add_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8842: V:1  | drop
#0. 8846: V:0  | return
i8x16.add_saturate_u() =>
>>> running export "i8x16.sub":
#0. 8850: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8870: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8890: V:2  | i8x16.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8894: V:1  | drop
#0. 8898: V:0  | return
i8x16.sub() =>
>>> running export "i8x16.sub_saturate_s":
#0. 8902: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8922: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8942: V:2  | i8x16.sub_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8946: V:1  | drop
#0. 8950: V:0  | return
i8x16.sub_saturate_s() =>
>>> running export "i8x16.sub_saturate_u":
#0. 8954: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 8974: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 8994: V:2  | i8x16.sub_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 8998: V:1  | drop
#0. 9002: V:0  | return
i8x16.sub_saturate_u() =>
>>> running export "i8x16.mul":
#0. 9006: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9026: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9046: V:2  | i8x16.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9050: V:1  | drop
#0. 9054: V:0  | return
i8x16.mul() =>
>>> running export "i16x8.neg":
#0. 9058: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9078: V:1  | i16x8.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9082: V:1  | drop
#0. 9086: V:0  | return
i16x8.neg() =>
>>> running export "i16x8.any_true":
#0. 9090: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9110: V:1  | i16x8.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9114: V:1  | drop
#0. 9118: V:0  | return
i16x8.any_true() =>
>>> running export "i16x8.all_true":
#0. 9122: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9142: V:1  | i16x8.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9146: V:1  | drop
#0. 9150: V:0  | return
i16x8.all_true() =>
>>> running export "i16x8.shl":
#0. 9154: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9174: V:1  | i32.const 0
#0. 9182: V:2  | i16x8.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9186: V:1  | drop
#0. 9190: V:0  | return
i16x8.shl() =>
>>> running export "i16x8.shr_s":
#0. 9194: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9214: V:1  | i32.const 0
#0. 9222: V:2  | i16x8.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9226: V:1  | drop
#0. 9230: V:0  | return
i16x8.shr_s() =>
>>> running export "i16x8.shr_u":
#0. 9234: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9254: V:1  | i32.const 0
#0. 9262: V:2  | i16x8.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9266: V:1  | drop
#0. 9270: V:0  | return
i16x8.shr_u() =>
>>> running export "i16x8.add":
#0. 9274: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9294: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9314: V:2  | i16x8.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9318: V:1  | drop
#0. 9322: V:0  | return
i16x8.add() =>
>>> running export "i16x8.add_saturate_s":
#0. 9326: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9346: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9366: V:2  | i16x8.add_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9370: V:1  | drop
#0. 9374: V:0  | return
i16x8.add_saturate_s() =>
>>> running export "i16x8.add_saturate_u":
#0. 9378: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9398: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9418: V:2  | i16x8.add_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9422: V:1  | drop
#0. 9426: V:0  | return
i16x8.add_saturate_u() =>
>>> running export "i16x8.sub":
#0. 9430: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9450: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9470: V:2  | i16x8.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9474: V:1  | drop
#0. 9478: V:0  | return
i16x8.sub() =>
>>> running export "i16x8.sub_saturate_s":
#0. 9482: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9502: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9522: V:2  | i16x8.sub_saturate_s $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9526: V:1  | drop
#0. 9530: V:0  | return
i16x8.sub_saturate_s() =>
>>> running export "i16x8.sub_saturate_u":
#0. 9534: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9554: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9574: V:2  | i16x8.sub_saturate_u $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9578: V:1  | drop
#0. 9582: V:0  | return
i16x8.sub_saturate_u() =>
>>> running export "i16x8.mul":
#0. 9586: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9606: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9626: V:2  | i16x8.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9630: V:1  | drop
#0. 9634: V:0  | return
i16x8.mul() =>
>>> running export "i32x4.neg":
#0. 9638: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9658: V:1  | i32x4.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9662: V:1  | drop
#0. 9666: V:0  | return
i32x4.neg() =>
>>> running export "i32x4.any_true":
#0. 9670: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9690: V:1  | i32x4.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9694: V:1  | drop
#0. 9698: V:0  | return
i32x4.any_true() =>
>>> running export "i32x4.all_true":
#0. 9702: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9722: V:1  | i32x4.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 9726: V:1  | drop
#0. 9730: V:0  | return
i32x4.all_true() =>
>>> running export "i32x4.shl":
#0. 9734: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9754: V:1  | i32.const 0
#0. 9762: V:2  | i32x4.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9766: V:1  | drop
#0. 9770: V:0  | return
i32x4.shl() =>
>>> running export "i32x4.shr_s":
#0. 9774: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9794: V:1  | i32.const 0
#0. 9802: V:2  | i32x4.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9806: V:1  | drop
#0. 9810: V:0  | return
i32x4.shr_s() =>
>>> running export "i32x4.shr_u":
#0. 9814: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9834: V:1  | i32.const 0
#0. 9842: V:2  | i32x4.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 9846: V:1  | drop
#0. 9850: V:0  | return
i32x4.shr_u() =>
>>> running export "i32x4.add":
#0. 9854: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9874: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9894: V:2  | i32x4.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9898: V:1  | drop
#0. 9902: V:0  | return
i32x4.add() =>
>>> running export "i32x4.sub":
#0. 9906: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9926: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9946: V:2  | i32x4.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 9950: V:1  | drop
#0. 9954: V:0  | return
i32x4.sub() =>
>>> running export "i32x4.mul":
#0. 9958: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 9978: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 9998: V:2  | i32x4.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10002: V:1  | drop
#0. 10006: V:0  | return
i32x4.mul() =>
>>> running export "i64x2.neg":
#0. 10010: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10030: V:1  | i64x2.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10034: V:1  | drop
#0. 10038: V:0  | return
i64x2.neg() =>
>>> running export "i64x2.any_true":
#0. 10042: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10062: V:1  | i64x2.any_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10066: V:1  | drop
#0. 10070: V:0  | return
i64x2.any_true() =>
>>> running export "i64x2.all_true":
#0. 10074: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10094: V:1  | i64x2.all_true $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10098: V:1  | drop
#0. 10102: V:0  | return
i64x2.all_true() =>
>>> running export "i64x2.shl":
#0. 10106: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10126: V:1  | i32.const 0
#0. 10134: V:2  | i64x2.shl $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 10138: V:1  | drop
#0. 10142: V:0  | return
i64x2.shl() =>
>>> running export "i64x2.shr_s":
#0. 10146: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10166: V:1  | i32.const 0
#0. 10174: V:2  | i64x2.shr_s $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 10178: V:1  | drop
#0. 10182: V:0  | return
i64x2.shr_s() =>
>>> running export "i64x2.shr_u":
#0. 10186: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10206: V:1  | i32.const 0
#0. 10214: V:2  | i64x2.shr_u $0x00000001 00000001 00000001 00000001  $0x00000000
#0. 10218: V:1  | drop
#0. 10222: V:0  | return
i64x2.shr_u() =>
>>> running export "i64x2.add":
#0. 10226: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10246: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10266: V:2  | i64x2.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10270: V:1  | drop
#0. 10274: V:0  | return
i64x2.add() =>
>>> running export "i64x2.sub":
#0. 10278: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10298: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10318: V:2  | i64x2.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10322: V:1  | drop
#0. 10326: V:0  | return
i64x2.sub() =>
>>> running export "f32x4.abs":
#0. 10330: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10350: V:1  | f32x4.abs $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10354: V:1  | drop
#0. 10358: V:0  | return
f32x4.abs() =>
>>> running export "f32x4.neg":
#0. 10362: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10382: V:1  | f32x4.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10386: V:1  | drop
#0. 10390: V:0  | return
f32x4.neg() =>
>>> running export "f32x4.sqrt":
#0. 10394: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10414: V:1  | f32x4.sqrt $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10418: V:1  | drop
#0. 10422: V:0  | return
f32x4.sqrt() =>
>>> running export "f32x4.add":
#0. 10426: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10446: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10466: V:2  | f32x4.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10470: V:1  | drop
#0. 10474: V:0  | return
f32x4.add() =>
>>> running export "f32x4.sub":
#0. 10478: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10498: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10518: V:2  | f32x4.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10522: V:1  | drop
#0. 10526: V:0  | return
f32x4.sub() =>
>>> running export "f32x4.mul":
#0. 10530: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10550: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10570: V:2  | f32x4.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10574: V:1  | drop
#0. 10578: V:0  | return
f32x4.mul() =>
>>> running export "f32x4.div":
#0. 10582: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10602: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10622: V:2  | f32x4.div $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10626: V:1  | drop
#0. 10630: V:0  | return
f32x4.div() =>
>>> running export "f32x4.min":
#0. 10634: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10654: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10674: V:2  | f32x4.min $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10678: V:1  | drop
#0. 10682: V:0  | return
f32x4.min() =>
>>> running export "f32x4.max":
#0. 10686: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10706: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10726: V:2  | f32x4.max $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10730: V:1  | drop
#0. 10734: V:0  | return
f32x4.max() =>
>>> running export "f64x2.abs":
#0. 10738: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10758: V:1  | f64x2.abs $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10762: V:1  | drop
#0. 10766: V:0  | return
f64x2.abs() =>
>>> running export "f64x2.neg":
#0. 10770: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10790: V:1  | f64x2.neg $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10794: V:1  | drop
#0. 10798: V:0  | return
f64x2.neg() =>
>>> running export "f64x2.sqrt":
#0. 10802: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10822: V:1  | f64x2.sqrt $0x00000001 0x00000001 0x00000001 0x00000001
#0. 10826: V:1  | drop
#0. 10830: V:0  | return
f64x2.sqrt() =>
>>> running export "f64x2.add":
#0. 10834: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10854: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10874: V:2  | f64x2.add $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10878: V:1  | drop
#0. 10882: V:0  | return
f64x2.add() =>
>>> running export "f64x2.sub":
#0. 10886: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10906: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10926: V:2  | f64x2.sub $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10930: V:1  | drop
#0. 10934: V:0  | return
f64x2.sub() =>
>>> running export "f64x2.mul":
#0. 10938: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 10958: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 10978: V:2  | f64x2.mul $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 10982: V:1  | drop
#0. 10986: V:0  | return
f64x2.mul() =>
>>> running export "f64x2.div":
#0. 10990: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11010: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 11030: V:2  | f64x2.div $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 11034: V:1  | drop
#0. 11038: V:0  | return
f64x2.div() =>
>>> running export "f64x2.min":
#0. 11042: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11062: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 11082: V:2  | f64x2.min $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 11086: V:1  | drop
#0. 11090: V:0  | return
f64x2.min() =>
>>> running export "f64x2.max":
#0. 11094: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11114: V:1  | v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
#0. 11134: V:2  | f64x2.max $0x00000001 00000001 00000001 00000001  $0x00000002 00000002 00000002 00000002
#0. 11138: V:1  | drop
#0. 11142: V:0  | return
f64x2.max() =>
>>> running export "i32x4.trunc_sat_f32x4_s":
#0. 11146: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11166: V:1  | i32x4.trunc_sat_f32x4_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11170: V:1  | drop
#0. 11174: V:0  | return
i32x4.trunc_sat_f32x4_s() =>
>>> running export "i32x4.trunc_sat_f32x4_u":
#0. 11178: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11198: V:1  | i32x4.trunc_sat_f32x4_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11202: V:1  | drop
#0. 11206: V:0  | return
i32x4.trunc_sat_f32x4_u() =>
>>> running export "i64x2.trunc_sat_f64x2_s":
#0. 11210: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11230: V:1  | i64x2.trunc_sat_f64x2_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11234: V:1  | drop
#0. 11238: V:0  | return
i64x2.trunc_sat_f64x2_s() =>
>>> running export "i64x2.trunc_sat_f64x2_u":
#0. 11242: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11262: V:1  | i64x2.trunc_sat_f64x2_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11266: V:1  | drop
#0. 11270: V:0  | return
i64x2.trunc_sat_f64x2_u() =>
>>> running export "f32x4.convert_i32x4_s":
#0. 11274: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11294: V:1  | f32x4.convert_i32x4_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11298: V:1  | drop
#0. 11302: V:0  | return
f32x4.convert_i32x4_s() =>
>>> running export "f32x4.convert_i32x4_u":
#0. 11306: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11326: V:1  | f32x4.convert_i32x4_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11330: V:1  | drop
#0. 11334: V:0  | return
f32x4.convert_i32x4_u() =>
>>> running export "f64x2.convert_i64x2_s":
#0. 11338: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11358: V:1  | f64x2.convert_i64x2_s $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11362: V:1  | drop
#0. 11366: V:0  | return
f64x2.convert_i64x2_s() =>
>>> running export "f64x2.convert_i64x2_u":
#0. 11370: V:0  | v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
#0. 11390: V:1  | f64x2.convert_i64x2_u $0x00000001 0x00000001 0x00000001 0x00000001
#0. 11394: V:1  | drop
#0. 11398: V:0  | return
f64x2.convert_i64x2_u() =>
>>> running export "atomic.notify":
#0. 11402: V:0  | i32.const 1
#0. 11410: V:1  | i32.const 2
#0. 11418: V:2  | atomic.notify $0:1+$3, 2
atomic.notify() => error: unreachable executed
>>> running export "i32.atomic.wait":
#0. 11438: V:0  | i32.const 1
#0. 11446: V:1  | i32.const 2
#0. 11454: V:2  | i64.const 3
#0. 11466: V:3  | i32.atomic.wait $0:1+$3, 2, 3
i32.atomic.wait() => error: unreachable executed
>>> running export "i64.atomic.wait":
#0. 11486: V:0  | i32.const 1
#0. 11494: V:1  | i64.const 2
#0. 11506: V:2  | i64.const 3
#0. 11518: V:3  | i64.atomic.wait $0:1+$3, 2, 3
i64.atomic.wait() => error: unreachable executed
>>> running export "i32.atomic.load":
#0. 11538: V:0  | i32.const 1
#0. 11546: V:1  | i32.atomic.load $0:1+$3
#0. 11558: V:1  | drop
#0. 11562: V:0  | return
i32.atomic.load() =>
>>> running export "i64.atomic.load":
#0. 11566: V:0  | i32.const 1
#0. 11574: V:1  | i64.atomic.load $0:1+$7
#0. 11586: V:1  | drop
#0. 11590: V:0  | return
i64.atomic.load() =>
>>> running export "i32.atomic.load8_u":
#0. 11594: V:0  | i32.const 1
#0. 11602: V:1  | i32.atomic.load8_u $0:1+$3
#0. 11614: V:1  | drop
#0. 11618: V:0  | return
i32.atomic.load8_u() =>
>>> running export "i32.atomic.load16_u":
#0. 11622: V:0  | i32.const 1
#0. 11630: V:1  | i32.atomic.load16_u $0:1+$3
#0. 11642: V:1  | drop
#0. 11646: V:0  | return
i32.atomic.load16_u() =>
>>> running export "i64.atomic.load8_u":
#0. 11650: V:0  | i32.const 1
#0. 11658: V:1  | i64.atomic.load8_u $0:1+$3
#0. 11670: V:1  | drop
#0. 11674: V:0  | return
i64.atomic.load8_u() =>
>>> running export "i64.atomic.load16_u":
#0. 11678: V:0  | i32.const 1
#0. 11686: V:1  | i64.atomic.load16_u $0:1+$3
#0. 11698: V:1  | drop
#0. 11702: V:0  | return
i64.atomic.load16_u() =>
>>> running export "i64.atomic.load32_u":
#0. 11706: V:0  | i32.const 1
#0. 11714: V:1  | i64.atomic.load32_u $0:1+$3
#0. 11726: V:1  | drop
#0. 11730: V:0  | return
i64.atomic.load32_u() =>
>>> running export "i32.atomic.store":
#0. 11734: V:0  | i32.const 1
#0. 11742: V:1  | i32.const 2
#0. 11750: V:2  | i32.atomic.store $0:1+$3, 2
#0. 11762: V:0  | return
i32.atomic.store() =>
>>> running export "i64.atomic.store":
#0. 11766: V:0  | i32.const 1
#0. 11774: V:1  | i64.const 2
#0. 11786: V:2  | i64.atomic.store $0:1+$7, 2
#0. 11798: V:0  | return
i64.atomic.store() =>
>>> running export "i32.atomic.store8":
#0. 11802: V:0  | i32.const 1
#0. 11810: V:1  | i32.const 2
#0. 11818: V:2  | i32.atomic.store8 $0:1+$3, 2
#0. 11830: V:0  | return
i32.atomic.store8() =>
>>> running export "i32.atomic.store16":
#0. 11834: V:0  | i32.const 1
#0. 11842: V:1  | i32.const 2
#0. 11850: V:2  | i32.atomic.store16 $0:1+$3, 2
#0. 11862: V:0  | return
i32.atomic.store16() =>
>>> running export "i64.atomic.store8":
#0. 11866: V:0  | i32.const 1
#0. 11874: V:1  | i64.const 2
#0. 11886: V:2  | i64.atomic.store8 $0:1+$3, 2
#0. 11898: V:0  | return
i64.atomic.store8() =>
>>> running export "i64.atomic.store16":
#0. 11902: V:0  | i32.const 1
#0. 11910: V:1  | i64.const 2
#0. 11922: V:2  | i64.atomic.store16 $0:1+$3, 2
#0. 11934: V:0  | return
i64.atomic.store16() =>
>>> running export "i64.atomic.store32":
#0. 11938: V:0  | i32.const 1
#0. 11946: V:1  | i64.const 2
#0. 11958: V:2  | i64.atomic.store32 $0:1+$3, 2
#0. 11970: V:0  | return
i64.atomic.store32() =>
>>> running export "i32.atomic.rmw.add":
#0. 11974: V:0  | i32.const 1
#0. 11982: V:1  | i32.const 2
#0. 11990: V:2  | i32.atomic.rmw.add $0:1+$3, 2
#0. 12002: V:1  | drop
#0. 12006: V:0  | return
i32.atomic.rmw.add() =>
>>> running export "i64.atomic.rmw.add":
#0. 12010: V:0  | i32.const 1
#0. 12018: V:1  | i64.const 2
#0. 12030: V:2  | i64.atomic.rmw.add $0:1+$7, 2
#0. 12042: V:1  | drop
#0. 12046: V:0  | return
i64.atomic.rmw.add() =>
>>> running export "i32.atomic.rmw8.add_u":
#0. 12050: V:0  | i32.const 1
#0. 12058: V:1  | i32.const 2
#0. 12066: V:2  | i32.atomic.rmw8.add_u $0:1+$3, 2
#0. 12078: V:1  | drop
#0. 12082: V:0  | return
i32.atomic.rmw8.add_u() =>
>>> running export "i32.atomic.rmw16.add_u":
#0. 12086: V:0  | i32.const 1
#0. 12094: V:1  | i32.const 2
#0. 12102: V:2  | i32.atomic.rmw16.add_u $0:1+$3, 2
#0. 12114: V:1  | drop
#0. 12118: V:0  | return
i32.atomic.rmw16.add_u() =>
>>> running export "i64.atomic.rmw8.add_u":
#0. 12122: V:0  | i32.const 1
#0. 12130: V:1  | i64.const 2
#0. 12142: V:2  | i64.atomic.rmw8.add_u $0:1+$3, 2
#0. 12154: V:1  | drop
#0. 12158: V:0  | return
i64.atomic.rmw8.add_u() =>
>>> running export "i64.atomic.rmw16.add_u":
#0. 12162: V:0  | i32.const 1
#0. 12170: V:1  | i64.const 2
#0. 12182: V:2  | i64.atomic.rmw16.add_u $0:1+$3, 2
#0. 12194: V:1  | drop
#0. 12198: V:0  | return
i64.atomic.rmw16.add_u() =>
>>> running export "i64.atomic.rmw32.add_u":
#0. 12202: V:0  | i32.const 1
#0. 12210: V:1  | i64.const 2
#0. 12222: V:2  | i64.atomic.rmw32.add_u $0:1+$3, 2
#0. 12234: V:1  | drop
#0. 12238: V:0  | return
i64.atomic.rmw32.add_u() =>
>>> running export "i32.atomic.rmw.sub":
#0. 12242: V:0  | i32.const 1
#0. 12250: V:1  | i32.const 2
#0. 12258: V:2  | i32.atomic.rmw.sub $0:1+$3, 2
#0. 12270: V:1  | drop
#0. 12274: V:0  | return
i32.atomic.rmw.sub() =>
>>> running export "i64.atomic.rmw.sub":
#0. 12278: V:0  | i32.const 1
#0. 12286: V:1  | i64.const 2
#0. 12298: V:2  | i64.atomic.rmw.sub $0:1+$7, 2
#0. 12310: V:1  | drop
#0. 12314: V:0  | return
i64.atomic.rmw.sub() =>
>>> running export "i32.atomic.rmw8.sub_u":
#0. 12318: V:0  | i32.const 1
#0. 12326: V:1  | i32.const 2
#0. 12334: V:2  | i32.atomic.rmw8.sub_u $0:1+$3, 2
#0. 12346: V:1  | drop
#0. 12350: V:0  | return
i32.atomic.rmw8.sub_u() =>
>>> running export "i32.atomic.rmw16.sub_u":
#0. 12354: V:0  | i32.const 1
#0. 12362: V:1  | i32.const 2
#0. 12370: V:2  | i32.atomic.rmw16.sub_u $0:1+$3, 2
#0. 12382: V:1  | drop
#0. 12386: V:0  | return
i32.atomic.rmw16.sub_u() =>
>>> running export "i64.atomic.rmw8.sub_u":
#0. 12390: V:0  | i32.const 1
#0. 12398: V:1  | i64.const 2
#0. 12410: V:2  | i64.atomic.rmw8.sub_u $0:1+$3, 2
#0. 12422: V:1  | drop
#0. 12426: V:0  | return
i64.atomic.rmw8.sub_u() =>
>>> running export "i64.atomic.rmw16.sub_u":
#0. 12430: V:0  | i32.const 1
#0. 12438: V:1  | i64.const 2
#0. 12450: V:2  | i64.atomic.rmw16.sub_u $0:1+$3, 2
#0. 12462: V:1  | drop
#0. 12466: V:0  | return
i64.atomic.rmw16.sub_u() =>
>>> running export "i64.atomic.rmw32.sub_u":
#0. 12470: V:0  | i32.const 1
#0. 12478: V:1  | i64.const 2
#0. 12490: V:2  | i64.atomic.rmw32.sub_u $0:1+$3, 2
#0. 12502: V:1  | drop
#0. 12506: V:0  | return
i64.atomic.rmw32.sub_u() =>
>>> running export "i32.atomic.rmw.and":
#0. 12510: V:0  | i32.const 1
#0. 12518: V:1  | i32.const 2
#0. 12526: V:2  | i32.atomic.rmw.and $0:1+$3, 2
#0. 12538: V:1  | drop
#0. 12542: V:0  | return
i32.atomic.rmw.and() =>
>>> running export "i64.atomic.rmw.and":
#0. 12546: V:0  | i32.const 1
#0. 12554: V:1  | i64.const 2
#0. 12566: V:2  | i64.atomic.rmw.and $0:1+$7, 2
#0. 12578: V:1  | drop
#0. 12582: V:0  | return
i64.atomic.rmw.and() =>
>>> running export "i32.atomic.rmw8.and_u":
#0. 12586: V:0  | i32.const 1
#0. 12594: V:1  | i32.const 2
#0. 12602: V:2  | i32.atomic.rmw8.and_u $0:1+$3, 2
#0. 12614: V:1  | drop
#0. 12618: V:0  | return
i32.atomic.rmw8.and_u() =>
>>> running export "i32.atomic.rmw16.and_u":
#0. 12622: V:0  | i32.const 1
#0. 12630: V:1  | i32.const 2
#0. 12638: V:2  | i32.atomic.rmw16.and_u $0:1+$3, 2
#0. 12650: V:1  | drop
#0. 12654: V:0  | return
i32.atomic.rmw16.and_u() =>
>>> running export "i64.atomic.rmw8.and_u":
#0. 12658: V:0  | i32.const 1
#0. 12666: V:1  | i64.const 2
#0. 12678: V:2  | i64.atomic.rmw8.and_u $0:1+$3, 2
#0. 12690: V:1  | drop
#0. 12694: V:0  | return
i64.atomic.rmw8.and_u() =>
>>> running export "i64.atomic.rmw16.and_u":
#0. 12698: V:0  | i32.const 1
#0. 12706: V:1  | i64.const 2
#0. 12718: V:2  | i64.atomic.rmw16.and_u $0:1+$3, 2
#0. 12730: V:1  | drop
#0. 12734: V:0  | return
i64.atomic.rmw16.and_u() =>
>>> running export "i64.atomic.rmw32.and_u":
#0. 12738: V:0  | i32.const 1
#0. 12746: V:1  | i64.const 2
#0. 12758: V:2  | i64.atomic.rmw32.and_u $0:1+$3, 2
#0. 12770: V:1  | drop
#0. 12774: V:0  | return
i64.atomic.rmw32.and_u() =>
>>> running export "i32.atomic.rmw.or":
#0. 12778: V:0  | i32.const 1
#0. 12786: V:1  | i32.const 2
#0. 12794: V:2  | i32.atomic.rmw.or $0:1+$3, 2
#0. 12806: V:1  | drop
#0. 12810: V:0  | return
i32.atomic.rmw.or() =>
>>> running export "i64.atomic.rmw.or":
#0. 12814: V:0  | i32.const 1
#0. 12822: V:1  | i64.const 2
#0. 12834: V:2  | i64.atomic.rmw.or $0:1+$7, 2
#0. 12846: V:1  | drop
#0. 12850: V:0  | return
i64.atomic.rmw.or() =>
>>> running export "i32.atomic.rmw8.or_u":
#0. 12854: V:0  | i32.const 1
#0. 12862: V:1  | i32.const 2
#0. 12870: V:2  | i32.atomic.rmw8.or_u $0:1+$3, 2
#0. 12882: V:1  | drop
#0. 12886: V:0  | return
i32.atomic.rmw8.or_u() =>
>>> running export "i32.atomic.rmw16.or_u":
#0. 12890: V:0  | i32.const 1
#0. 12898: V:1  | i32.const 2
#0. 12906: V:2  | i32.atomic.rmw16.or_u $0:1+$3, 2
#0. 12918: V:1  | drop
#0. 12922: V:0  | return
i32.atomic.rmw16.or_u() =>
>>> running export "i64.atomic.rmw8.or_u":
#0. 12926: V:0  | i32.const 1
#0. 12934: V:1  | i64.const 2
#0. 12946: V:2  | i64.atomic.rmw8.or_u $0:1+$3, 2
#0. 12958: V:1  | drop
#0. 12962: V:0  | return
i64.atomic.rmw8.or_u() =>
>>> running export "i64.atomic.rmw16.or_u":
#0. 12966: V:0  | i32.const 1
#0. 12974: V:1  | i64.const 2
#0. 12986: V:2  | i64.atomic.rmw16.or_u $0:1+$3, 2
#0. 12998: V:1  | drop
#0. 13002: V:0  | return
i64.atomic.rmw16.or_u() =>
>>> running export "i64.atomic.rmw32.or_u":
#0. 13006: V:0  | i32.const 1
#0. 13014: V:1  | i64.const 2
#0. 13026: V:2  | i64.atomic.rmw32.or_u $0:1+$3, 2
#0. 13038: V:1  | drop
#0. 13042: V:0  | return
i64.atomic.rmw32.or_u() =>
>>> running export "i32.atomic.rmw.xor":
#0. 13046: V:0  | i32.const 1
#0. 13054: V:1  | i32.const 2
#0. 13062: V:2  | i32.atomic.rmw.xor $0:1+$3, 2
#0. 13074: V:1  | drop
#0. 13078: V:0  | return
i32.atomic.rmw.xor() =>
>>> running export "i64.atomic.rmw.xor":
#0. 13082: V:0  | i32.const 1
#0. 13090: V:1  | i64.const 2
#0. 13102: V:2  | i64.atomic.rmw.xor $0:1+$7, 2
#0. 13114: V:1  | drop
#0. 13118: V:0  | return
i64.atomic.rmw.xor() =>
>>> running export "i32.atomic.rmw8.xor_u":
#0. 13122: V:0  | i32.const 1
#0. 13130: V:1  | i32.const 2
#0. 13138: V:2  | i32.atomic.rmw8.xor_u $0:1+$3, 2
#0. 13150: V:1  | drop
#0. 13154: V:0  | return
i32.atomic.rmw8.xor_u() =>
>>> running export "i32.atomic.rmw16.xor_u":
#0. 13158: V:0  | i32.const 1
#0. 13166: V:1  | i32.const 2
#0. 13174: V:2  | i32.atomic.rmw16.xor_u $0:1+$3, 2
#0. 13186: V:1  | drop
#0. 13190: V:0  | return
i32.atomic.rmw16.xor_u() =>
>>> running export "i64.atomic.rmw8.xor_u":
#0. 13194: V:0  | i32.const 1
#0. 13202: V:1  | i64.const 2
#0. 13214: V:2  | i64.atomic.rmw8.xor_u $0:1+$3, 2
#0. 13226: V:1  | drop
#0. 13230: V:0  | return
i64.atomic.rmw8.xor_u() =>
>>> running export "i64.atomic.rmw16.xor_u":
#0. 13234: V:0  | i32.const 1
#0. 13242: V:1  | i64.const 2
#0. 13254: V:2  | i64.atomic.rmw16.xor_u $0:1+$3, 2
#0. 13266: V:1  | drop
#0. 13270: V:0  | return
i64.atomic.rmw16.xor_u() =>
>>> running export "i64.atomic.rmw32.xor_u":
#0. 13274: V:0  | i32.const 1
#0. 13282: V:1  | i64.const 2
#0. 13294: V:2  | i64.atomic.rmw32.xor_u $0:1+$3, 2
#0. 13306: V:1  | drop
#0. 13310: V:0  | return
i64.atomic.rmw32.xor_u() =>
>>> running export "i32.atomic.rmw.xchg":
#0. 13314: V:0  | i32.const 1
#0. 13322: V:1  | i32.const 2
#0. 13330: V:2  | i32.atomic.rmw.xchg $0:1+$3, 2
#0. 13342: V:1  | drop
#0. 13346: V:0  | return
i32.atomic.rmw.xchg() =>
>>> running export "i64.atomic.rmw.xchg":
#0. 13350: V:0  | i32.const 1
#0. 13358: V:1  | i64.const 2
#0. 13370: V:2  | i64.atomic.rmw.xchg $0:1+$7, 2
#0. 13382: V:1  | drop
#0. 13386: V:0  | return
i64.atomic.rmw.xchg() =>
>>> running export "i32.atomic.rmw8.xchg_u":
#0. 13390: V:0  | i32.const 1
#0. 13398: V:1  | i32.const 2
#0. 13406: V:2  | i32.atomic.rmw8.xchg_u $0:1+$3, 2
#0. 13418: V:1  | drop
#0. 13422: V:0  | return
i32.atomic.rmw8.xchg_u() =>
>>> running export "i32.atomic.rmw16.xchg_u":
#0. 13426: V:0  | i32.const 1
#0. 13434: V:1  | i32.const 2
#0. 13442: V:2  | i32.atomic.rmw16.xchg_u $0:1+$3, 2
#0. 13454: V:1  | drop
#0. 13458: V:0  | return
i32.atomic.rmw16.xchg_u() =>
>>> running export "i64.atomic.rmw8.xchg_u":
#0. 13462: V:0  | i32.const 1
#0. 13470: V:1  | i64.const 2
#0. 13482: V:2  | i64.atomic.rmw8.xchg_u $0:1+$3, 2
#0. 13494: V:1  | drop
#0. 13498: V:0  | return
i64.atomic.rmw8.xchg_u() =>
>>> running export "i64.atomic.rmw16.xchg_u":
#0. 13502: V:0  | i32.const 1
#0. 13510: V:1  | i64.const 2
#0. 13522: V:2  | i64.atomic.rmw16.xchg_u $0:1+$3, 2
#0. 13534: V:1  | drop
#0. 13538: V:0  | return
i64.atomic.rmw16.xchg_u() =>
>>> running export "i64.atomic.rmw32.xchg_u":
#0. 13542: V:0  | i32.const 1
#0. 13550: V:1  | i64.const 2
#0. 13562: V:2  | i64.atomic.rmw32.xchg_u $0:1+$3, 2
#0. 13574: V:1  | drop
#0. 13578: V:0  | return
i64.atomic.rmw32.xchg_u() =>
>>> running export "i32.atomic.rmw.cmpxchg":
#0. 13582: V:0  | i32.const 1
#0. 13590: V:1  | i32.const 2
#0. 13598: V:2  | i32.const 3
#0. 13606: V:3  | i32.atomic.rmw.cmpxchg $0:1+$3, 2, 3
#0. 13618: V:1  | drop
#0. 13622: V:0  | return
i32.atomic.rmw.cmpxchg() =>
>>> running export "i64.atomic.rmw.cmpxchg":
#0. 13626: V:0  | i32.const 1
#0. 13634: V:1  | i64.const 2
#0. 13646: V:2  | i64.const 3
#0. 13658: V:3  | i64.atomic.rmw.cmpxchg $0:1+$7, 2, 3
#0. 13670: V:1  | drop
#0. 13674: V:0  | return
i64.atomic.rmw.cmpxchg() =>
>>> running export "i32.atomic.rmw8.cmpxchg_u":
#0. 13678: V:0  | i32.const 1
#0. 13686: V:1  | i32.const 2
#0. 13694: V:2  | i32.const 3
#0. 13702: V:3  | i32.atomic.rmw8.cmpxchg_u $0:1+$3, 2, 3
#0. 13714: V:1  | drop
#0. 13718: V:0  | return
i32.atomic.rmw8.cmpxchg_u() =>
>>> running export "i32.atomic.rmw16.cmpxchg_u":
#0. 13722: V:0  | i32.const 1
#0. 13730: V:1  | i32.const 2
#0. 13738: V:2  | i32.const 3
#0. 13746: V:3  | i32.atomic.rmw16.cmpxchg_u $0:1+$3, 2, 3
#0. 13758: V:1  | drop
#0. 13762: V:0  | return
i32.atomic.rmw16.cmpxchg_u() =>
>>> running export "i64.atomic.rmw8.cmpxchg_u":
#0. 13766: V:0  | i32.const 1
#0. 13774: V:1  | i64.const 2
#0. 13786: V:2  | i64.const 3
#0. 13798: V:3  | i64.atomic.rmw8.cmpxchg_u $0:1+$3, 2, 3
#0. 13810: V:1  | drop
#0. 13814: V:0  | return
i64.atomic.rmw8.cmpxchg_u() =>
>>> running export "i64.atomic.rmw16.cmpxchg_u":
#0. 13818: V:0  | i32.const 1
#0. 13826: V:1  | i64.const 2
#0. 13838: V:2  | i64.const 3
#0. 13850: V:3  | i64.atomic.rmw16.cmpxchg_u $0:1+$3, 2, 3
#0. 13862: V:1  | drop
#0. 13866: V:0  | return
i64.atomic.rmw16.cmpxchg_u() =>
>>> running export "i64.atomic.rmw32.cmpxchg_u":
#0. 13870: V:0  | i32.const 1
#0. 13878: V:1  | i64.const 2
#0. 13890: V:2  | i64.const 3
#0. 13902: V:3  | i64.atomic.rmw32.cmpxchg_u $0:1+$3, 2, 3
#0. 13914: V:1  | drop
#0. 13918: V:0  | return
i64.atomic.rmw32.cmpxchg_u() =>
;;; STDOUT ;;)
