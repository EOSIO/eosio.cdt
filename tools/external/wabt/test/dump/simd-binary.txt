;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 add
  (func (export "i8x16_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.add)

  ;; i16x8 add
  (func (export "i16x8_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.add)

  ;; i32x4 add
  (func (export "i32x4_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.add)

  ;; i64x2 add
  (func (export "i64x2_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.add)

  ;; i8x16 sub
  (func (export "i8x16_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.sub)

  ;; i16x8 sub
  (func (export "i16x8_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.sub)

  ;; i32x4 sub
  (func (export "i32x4_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.sub)

  ;; i64x2 sub
  (func (export "i64x2_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.sub)

  ;; i8x16 mul
  (func (export "i8x16_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.mul)

  ;; i16x8 mul
  (func (export "i16x8_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.mul)

  ;; i32x4 mul
  (func (export "i32x4_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.mul)

  ;; i8x16 saturating add (signed and unsigned)
  (func (export "i8x16_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x00000003 0x00000080
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x000000ff
    i8x16.add_saturate_s)
  (func (export "i8x16_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x04000002 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i8x16.add_saturate_u)

  ;; i16x8 saturating add (signed and unsigned)
  (func (export "i16x8_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x00000003 0x00008000
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x0000fffe
    i16x8.add_saturate_s)
  (func (export "i16x8_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.add_saturate_u)

  ;; i8x16 saturating sub (signed and unsigned)
  (func (export "i8x16_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x000000fe 0x00000080
    v128.const i32x4 0x00000001 0x000000fe 0x0000007f 0x000000ff
    i8x16.sub_saturate_s)
  (func (export "i8x16_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
    v128.const i32x4 0x00020001 0xfe00fffe 0x0000007f 0x00000004
    i8x16.sub_saturate_u)

  ;; i16x8 saturating sub (signed and unsigned)
  (func (export "i16x8_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x0000fffe 0x00008000
    v128.const i32x4 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
    i16x8.sub_saturate_s)
  (func (export "i16x8_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.sub_saturate_u)

  ;; v128 and
  (func (export "v128_and_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.and)

  ;; v128 or
  (func (export "v128_or_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.or)

  ;; v128 xor
  (func (export "v128_xor_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.xor)

  ;; f32x4 min
  (func (export "f32x4_min_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.min)

  ;; f64x2 min
  (func (export "f64x2_min_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.min)

  ;; f32x4 max
  (func (export "f32x4_max_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.max)

  ;; f64x2 max
  (func (export "f64x2_max_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.max)

  ;; f32x4 add
  (func (export "f32x4_add_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.add)

  ;; f64x2 add
  (func (export "f64x2_add_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.add)

  ;; f32x4 sub
  (func (export "f32x4_sub_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.sub)

  ;; f64x2 sub
  (func (export "f64x2_sub_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.sub)

  ;; f32x4 div
  (func (export "f32x4_div_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.div)

  ;; f64x2 div
  (func (export "f64x2_div_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.div)

  ;; f32x4 mul
  (func (export "f32x4_mul_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.mul)

  ;; f64x2 mul
  (func (export "f64x2_mul_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.mul)

  ;; i8x16.narrow_i16x8_s
  (func (export "i8x16.narrow_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_s)

  ;; i8x16.narrow_i16x8_u
  (func (export "i8x16.narrow_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_u)

  ;; i16x8.narrow_i32x4_s
  (func (export "i16x8.narrow_i32x4_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_s)

  ;; i16x8.narrow_i32x4_u
  (func (export "i16x8.narrow_i32x4_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_u)

  ;; i16x8.widen_low_i8x16_s
  (func (export "i16x8.widen_low_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_s)

  ;; i16x8.widen_high_i8x16_s
  (func (export "i16x8.widen_high_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_s)

  ;; i16x8.widen_low_i8x16_u
  (func (export "i16x8.widen_low_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_u)

  ;; i16x8.widen_high_i8x16_u
  (func (export "i16x8.widen_high_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_u)

  ;; i32x4.widen_low_i16x8_s
  (func (export "i32x4.widen_low_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_s)

  ;; i32x4.widen_high_i16x8_s
  (func (export "i32x4.widen_high_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_s)

  ;; i32x4.widen_low_i16x8_u
  (func (export "i32x4.widen_low_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_u)

  ;; i32x4.widen_high_i16x8_u
  (func (export "i32x4.widen_high_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_u)

  ;; v128.andnot
  (func (export "v128.andnot") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.andnot)

  ;; i8x16.avgr_u
  (func (export "i8x16.avgr_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.avgr_u)

  ;; i16x8.avgr_u
  (func (export "i16x8.avgr_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.avgr_u)
)

(;; STDOUT ;;;

simd-binary.wasm:	file format wasm 0x1

Code Disassembly:

000408 func[0] <i8x16_add_0>:
 000409: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000412: 00 03 00 00 00 04 00 00 00 | 
 00041b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000424: 00 03 00 00 00 04 00 00 00 | 
 00042d: fd 57                      | i8x16.add
 00042f: 0b                         | end
000431 func[1] <i16x8_add_0>:
 000432: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00043b: 00 03 00 00 00 04 00 00 00 | 
 000444: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00044d: 00 03 00 00 00 04 00 00 00 | 
 000456: fd 68                      | i16x8.add
 000458: 0b                         | end
00045a func[2] <i32x4_add_0>:
 00045b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000464: 00 03 00 00 00 04 00 00 00 | 
 00046d: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000476: 00 03 00 00 00 04 00 00 00 | 
 00047f: fd 79                      | i32x4.add
 000481: 0b                         | end
000483 func[3] <i64x2_add_0>:
 000484: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00048d: 00 03 00 00 00 04 00 00 00 | 
 000496: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00049f: 00 03 00 00 00 04 00 00 00 | 
 0004a8: fd 8a 01                   | i64x2.add
 0004ab: 0b                         | end
0004ad func[4] <i8x16_sub_0>:
 0004ae: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004b7: 00 03 00 00 00 04 00 00 00 | 
 0004c0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004c9: 00 03 00 00 00 04 00 00 00 | 
 0004d2: fd 5a                      | i8x16.sub
 0004d4: 0b                         | end
0004d6 func[5] <i16x8_sub_0>:
 0004d7: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004e0: 00 03 00 00 00 04 00 00 00 | 
 0004e9: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004f2: 00 03 00 00 00 04 00 00 00 | 
 0004fb: fd 6b                      | i16x8.sub
 0004fd: 0b                         | end
0004ff func[6] <i32x4_sub_0>:
 000500: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000509: 00 03 00 00 00 04 00 00 00 | 
 000512: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00051b: 00 03 00 00 00 04 00 00 00 | 
 000524: fd 7c                      | i32x4.sub
 000526: 0b                         | end
000528 func[7] <i64x2_sub_0>:
 000529: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000532: 00 03 00 00 00 04 00 00 00 | 
 00053b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000544: 00 03 00 00 00 04 00 00 00 | 
 00054d: fd 8d 01                   | i64x2.sub
 000550: 0b                         | end
000552 func[8] <i8x16_mul_0>:
 000553: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00055c: 00 03 00 00 00 04 00 00 00 | 
 000565: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00056e: 00 03 00 00 00 04 00 00 00 | 
 000577: fd 5d                      | i8x16.mul
 000579: 0b                         | end
00057b func[9] <i16x8_mul_0>:
 00057c: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000585: 00 03 00 00 00 04 00 00 00 | 
 00058e: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000597: 00 03 00 00 00 04 00 00 00 | 
 0005a0: fd 6e                      | i16x8.mul
 0005a2: 0b                         | end
0005a4 func[10] <i32x4_mul_0>:
 0005a5: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0005ae: 00 03 00 00 00 04 00 00 00 | 
 0005b7: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0005c0: 00 03 00 00 00 04 00 00 00 | 
 0005c9: fd 7f                      | i32x4.mul
 0005cb: 0b                         | end
0005cd func[11] <i8x16_add_saturate_signed_0>:
 0005ce: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x00000003 0x00000080
 0005d7: 00 03 00 00 00 80 00 00 00 | 
 0005e0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x000000ff
 0005e9: 00 03 00 00 00 ff 00 00 00 | 
 0005f2: fd 58                      | i8x16.add_saturate_s
 0005f4: 0b                         | end
0005f6 func[12] <i8x16_add_saturate_unsigned_0>:
 0005f7: fd 02 01 00 ff 00 02 00 00 | v128.const 0x00ff0001 0x04000002 0x00000003 0x00000004
 000600: 04 03 00 00 00 04 00 00 00 | 
 000609: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000612: fe 03 00 00 00 04 00 00 00 | 
 00061b: fd 59                      | i8x16.add_saturate_u
 00061d: 0b                         | end
00061f func[13] <i16x8_add_saturate_signed_0>:
 000620: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x00000003 0x00008000
 000629: 00 03 00 00 00 00 80 00 00 | 
 000632: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x0000fffe
 00063b: 00 03 00 00 00 fe ff 00 00 | 
 000644: fd 69                      | i16x8.add_saturate_s
 000646: 0b                         | end
000648 func[14] <i16x8_add_saturate_unsigned_0>:
 000649: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 000652: 04 03 00 00 00 04 00 00 00 | 
 00065b: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000664: fe 03 00 00 00 04 00 00 00 | 
 00066d: fd 6a                      | i16x8.add_saturate_u
 00066f: 0b                         | end
000671 func[15] <i8x16_sub_saturate_signed_0>:
 000672: fd 02 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x000000fe 0x00000080
 00067b: 00 fe 00 00 00 80 00 00 00 | 
 000684: fd 02 01 00 00 00 fe 00 00 | v128.const 0x00000001 0x000000fe 0x0000007f 0x000000ff
 00068d: 00 7f 00 00 00 ff 00 00 00 | 
 000696: fd 5b                      | i8x16.sub_saturate_s
 000698: 0b                         | end
00069a func[16] <i8x16_sub_saturate_unsigned_0>:
 00069b: fd 02 01 00 ff 00 7f 00 00 | v128.const 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
 0006a4: 04 fe ff 00 00 04 00 00 00 | 
 0006ad: fd 02 01 00 02 00 fe ff 00 | v128.const 0x00020001 0xfe00fffe 0x0000007f 0x00000004
 0006b6: fe 7f 00 00 00 04 00 00 00 | 
 0006bf: fd 5c                      | i8x16.sub_saturate_u
 0006c1: 0b                         | end
0006c3 func[17] <i16x8_sub_saturate_signed_0>:
 0006c4: fd 02 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x0000fffe 0x00008000
 0006cd: 00 fe ff 00 00 00 80 00 00 | 
 0006d6: fd 02 01 00 00 00 fe ff 00 | v128.const 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
 0006df: 00 ff 7f 00 00 fe ff 00 00 | 
 0006e8: fd 6c                      | i16x8.sub_saturate_s
 0006ea: 0b                         | end
0006ec func[18] <i16x8_sub_saturate_unsigned_0>:
 0006ed: fd 02 ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 0006f6: 04 03 00 00 00 04 00 00 00 | 
 0006ff: fd 02 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000708: fe 03 00 00 00 04 00 00 00 | 
 000711: fd 6d                      | i16x8.sub_saturate_u
 000713: 0b                         | end
000715 func[19] <v128_and_0>:
 000716: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 00071f: 00 03 00 00 44 04 00 00 00 | 
 000728: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000731: 00 03 00 00 00 04 00 00 55 | 
 00073a: fd 4d                      | v128.and
 00073c: 0b                         | end
00073e func[20] <v128_or_0>:
 00073f: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000748: 00 03 00 00 44 04 00 00 00 | 
 000751: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 00075a: 00 03 00 00 00 04 00 00 55 | 
 000763: fd 4e                      | v128.or
 000765: 0b                         | end
000767 func[21] <v128_xor_0>:
 000768: fd 02 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000771: 00 03 00 00 44 04 00 00 00 | 
 00077a: fd 02 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000783: 00 03 00 00 00 04 00 00 55 | 
 00078c: fd 4f                      | v128.xor
 00078e: 0b                         | end
000790 func[22] <f32x4_min_0>:
 000791: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 00079a: ff 00 50 9a 44 00 00 80 bf | 
 0007a3: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 0007ac: 3f 00 50 9a 44 00 00 80 3f | 
 0007b5: fd 9e 01                   | f32x4.min
 0007b8: 0b                         | end
0007ba func[23] <f64x2_min_0>:
 0007bb: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0007c4: 00 00 00 00 00 00 00 f8 ff | 
 0007cd: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0007d6: c0 00 00 00 00 00 00 f0 3f | 
 0007df: fd a9 01                   | f64x2.min
 0007e2: 0b                         | end
0007e4 func[24] <f32x4_max_0>:
 0007e5: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0007ee: ff 00 50 9a 44 00 00 80 bf | 
 0007f7: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 000800: 3f 00 50 9a 44 00 00 80 3f | 
 000809: fd 9f 01                   | f32x4.max
 00080c: 0b                         | end
00080e func[25] <f64x2_max_0>:
 00080f: fd 02 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000818: 00 00 00 00 00 00 00 f8 ff | 
 000821: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00082a: c0 00 00 00 00 00 00 f0 3f | 
 000833: fd aa 01                   | f64x2.max
 000836: 0b                         | end
000838 func[26] <f32x4_add_0>:
 000839: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 000842: ff 00 50 9a 44 00 50 9a c4 | 
 00084b: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000854: 3f 00 00 80 3f 00 00 c0 3f | 
 00085d: fd 9a 01                   | f32x4.add
 000860: 0b                         | end
000862 func[27] <f64x2_add_0>:
 000863: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 00086c: 3f 00 00 00 00 00 00 f8 ff | 
 000875: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 00087e: c0 00 00 00 00 00 00 f0 3f | 
 000887: fd a5 01                   | f64x2.add
 00088a: 0b                         | end
00088c func[28] <f32x4_sub_0>:
 00088d: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 000896: ff 00 50 9a 44 00 50 9a c4 | 
 00089f: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0008a8: 3f 00 00 80 3f 00 00 c0 3f | 
 0008b1: fd 9b 01                   | f32x4.sub
 0008b4: 0b                         | end
0008b6 func[29] <f64x2_sub_0>:
 0008b7: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 0008c0: 3f 00 00 00 00 00 00 f8 ff | 
 0008c9: fd 02 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0008d2: c0 00 00 00 00 00 00 f0 3f | 
 0008db: fd a6 01                   | f64x2.sub
 0008de: 0b                         | end
0008e0 func[30] <f32x4_div_0>:
 0008e1: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 0008ea: ff 00 00 c0 3f 00 00 40 c0 | 
 0008f3: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0008fc: 3f 00 00 80 3f 00 00 c0 3f | 
 000905: fd 9d 01                   | f32x4.div
 000908: 0b                         | end
00090a func[31] <f64x2_div_0>:
 00090b: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 000914: 3f 00 00 00 00 00 00 08 c0 | 
 00091d: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 000926: 3f 00 00 00 00 00 00 f8 3f | 
 00092f: fd a8 01                   | f64x2.div
 000932: 0b                         | end
000934 func[32] <f32x4_mul_0>:
 000935: fd 02 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 00093e: ff 00 00 c0 3f 00 00 40 c0 | 
 000947: fd 02 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000950: 3f 00 00 80 3f 00 00 c0 3f | 
 000959: fd 9c 01                   | f32x4.mul
 00095c: 0b                         | end
00095e func[33] <f64x2_mul_0>:
 00095f: fd 02 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 000968: 3f 00 00 00 00 00 00 08 c0 | 
 000971: fd 02 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 00097a: 3f 00 00 00 00 00 00 f8 3f | 
 000983: fd a7 01                   | f64x2.mul
 000986: 0b                         | end
000988 func[34] <i8x16.narrow_i16x8_s>:
 000989: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000992: 00 03 00 00 00 04 00 00 00 | 
 00099b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009a4: 00 03 00 00 00 04 00 00 00 | 
 0009ad: fd c6 01                   | i8x16.narrow_i16x8_s
 0009b0: 0b                         | end
0009b2 func[35] <i8x16.narrow_i16x8_u>:
 0009b3: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009bc: 00 03 00 00 00 04 00 00 00 | 
 0009c5: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009ce: 00 03 00 00 00 04 00 00 00 | 
 0009d7: fd c7 01                   | i8x16.narrow_i16x8_u
 0009da: 0b                         | end
0009dc func[36] <i16x8.narrow_i32x4_s>:
 0009dd: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009e6: 00 03 00 00 00 04 00 00 00 | 
 0009ef: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009f8: 00 03 00 00 00 04 00 00 00 | 
 000a01: fd c8 01                   | i16x8.narrow_i32x4_s
 000a04: 0b                         | end
000a06 func[37] <i16x8.narrow_i32x4_u>:
 000a07: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a10: 00 03 00 00 00 04 00 00 00 | 
 000a19: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a22: 00 03 00 00 00 04 00 00 00 | 
 000a2b: fd c9 01                   | i16x8.narrow_i32x4_u
 000a2e: 0b                         | end
000a30 func[38] <i16x8.widen_low_i8x16_s>:
 000a31: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a3a: 00 03 00 00 00 04 00 00 00 | 
 000a43: fd ca 01                   | i16x8.widen_low_i8x16_s
 000a46: 0b                         | end
000a48 func[39] <i16x8.widen_high_i8x16_s>:
 000a49: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a52: 00 03 00 00 00 04 00 00 00 | 
 000a5b: fd cb 01                   | i16x8.widen_high_i8x16_s
 000a5e: 0b                         | end
000a60 func[40] <i16x8.widen_low_i8x16_u>:
 000a61: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a6a: 00 03 00 00 00 04 00 00 00 | 
 000a73: fd cc 01                   | i16x8.widen_low_i8x16_u
 000a76: 0b                         | end
000a78 func[41] <i16x8.widen_high_i8x16_u>:
 000a79: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a82: 00 03 00 00 00 04 00 00 00 | 
 000a8b: fd cd 01                   | i16x8.widen_high_i8x16_u
 000a8e: 0b                         | end
000a90 func[42] <i32x4.widen_low_i16x8_s>:
 000a91: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a9a: 00 03 00 00 00 04 00 00 00 | 
 000aa3: fd ce 01                   | i32x4.widen_low_i16x8_s
 000aa6: 0b                         | end
000aa8 func[43] <i32x4.widen_high_i16x8_s>:
 000aa9: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000ab2: 00 03 00 00 00 04 00 00 00 | 
 000abb: fd cf 01                   | i32x4.widen_high_i16x8_s
 000abe: 0b                         | end
000ac0 func[44] <i32x4.widen_low_i16x8_u>:
 000ac1: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000aca: 00 03 00 00 00 04 00 00 00 | 
 000ad3: fd d0 01                   | i32x4.widen_low_i16x8_u
 000ad6: 0b                         | end
000ad8 func[45] <i32x4.widen_high_i16x8_u>:
 000ad9: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000ae2: 00 03 00 00 00 04 00 00 00 | 
 000aeb: fd d1 01                   | i32x4.widen_high_i16x8_u
 000aee: 0b                         | end
000af0 func[46] <v128.andnot>:
 000af1: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000afa: 00 03 00 00 00 04 00 00 00 | 
 000b03: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b0c: 00 03 00 00 00 04 00 00 00 | 
 000b15: fd d8 01                   | v128.andnot
 000b18: 0b                         | end
000b1a func[47] <i8x16.avgr_u>:
 000b1b: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b24: 00 03 00 00 00 04 00 00 00 | 
 000b2d: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b36: 00 03 00 00 00 04 00 00 00 | 
 000b3f: fd d9 01                   | i8x16.avgr_u
 000b42: 0b                         | end
000b44 func[48] <i16x8.avgr_u>:
 000b45: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b4e: 00 03 00 00 00 04 00 00 00 | 
 000b57: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b60: 00 03 00 00 00 04 00 00 00 | 
 000b69: fd da 01                   | i16x8.avgr_u
 000b6c: 0b                         | end
;;; STDOUT ;;)
