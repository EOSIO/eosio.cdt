;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 add
  (func (export "i8x16_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.add)

  ;; i16x8 add
  (func (export "i16x8_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.add)

  ;; i32x4 add
  (func (export "i32x4_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.add)

  ;; i64x2 add
  (func (export "i64x2_add_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.add)

  ;; i8x16 sub
  (func (export "i8x16_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.sub)

  ;; i16x8 sub
  (func (export "i16x8_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.sub)

  ;; i32x4 sub
  (func (export "i32x4_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.sub)

  ;; i64x2 sub
  (func (export "i64x2_sub_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.sub)

  ;; i16x8 mul
  (func (export "i16x8_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.mul)

  ;; i32x4 mul
  (func (export "i32x4_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.mul)

  ;; i64x2 mul
  (func (export "i64x2_mul_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.mul)

  ;; i8x16 saturating add (signed and unsigned)
  (func (export "i8x16_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x00000003 0x00000080
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x000000ff
    i8x16.add_saturate_s)
  (func (export "i8x16_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x04000002 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i8x16.add_saturate_u)

  ;; i16x8 saturating add (signed and unsigned)
  (func (export "i16x8_add_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x00000003 0x00008000
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x0000fffe
    i16x8.add_saturate_s)
  (func (export "i16x8_add_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.add_saturate_u)

  ;; i8x16 saturating sub (signed and unsigned)
  (func (export "i8x16_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x0000007f 0x000000fe 0x00000080
    v128.const i32x4 0x00000001 0x000000fe 0x0000007f 0x000000ff
    i8x16.sub_saturate_s)
  (func (export "i8x16_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
    v128.const i32x4 0x00020001 0xfe00fffe 0x0000007f 0x00000004
    i8x16.sub_saturate_u)

  ;; i16x8 saturating sub (signed and unsigned)
  (func (export "i16x8_sub_saturate_signed_0") (result v128)
    v128.const i32x4 0x00000001 0x00007fff 0x0000fffe 0x00008000
    v128.const i32x4 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
    i16x8.sub_saturate_s)
  (func (export "i16x8_sub_saturate_unsigned_0") (result v128)
    v128.const i32x4 0x00ffffff 0x0400ffff 0x00000003 0x00000004
    v128.const i32x4 0x00020001 0xfe000002 0x00000003 0x00000004
    i16x8.sub_saturate_u)

  ;; v128 and
  (func (export "v128_and_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.and)

  ;; v128 or
  (func (export "v128_or_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.or)

  ;; v128 xor
  (func (export "v128_xor_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00040002 0x44000003 0x00000004
    v128.const i32x4 0x00020001 0x00fe0002 0x00000003 0x55000004
    v128.xor)

  ;; f32x4 min
  (func (export "f32x4_min_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.min)

  ;; f64x2 min
  (func (export "f64x2_min_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.min)

  ;; f32x4 max
  (func (export "f32x4_max_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    v128.const i32x4 0x00000000 0x3f800000 0x449a5000 0x3f800000
    f32x4.max)

  ;; f64x2 max
  (func (export "f64x2_max_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.max)

  ;; f32x4 add
  (func (export "f32x4_add_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.add)

  ;; f64x2 add
  (func (export "f64x2_add_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.add)

  ;; f32x4 sub
  (func (export "f32x4_sub_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xc49a5000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.sub)

  ;; f64x2 sub
  (func (export "f64x2_sub_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xfff80000
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.sub)

  ;; f32x4 div
  (func (export "f32x4_div_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.div)

  ;; f64x2 div
  (func (export "f64x2_div_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.div)

  ;; f32x4 mul
  (func (export "f32x4_mul_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x3fc00000 0xc0400000
    v128.const i32x4 0x00000000 0x3f800000 0x3f800000 0x3fc00000
    f32x4.mul)

  ;; f64x2 mul
  (func (export "f64x2_mul_0") (result v128)
    v128.const i32x4 0x00000000 0x3ff80000 0x00000000 0xc0080000
    v128.const i32x4 0x00000000 0x3ff00000 0x00000000 0x3ff80000
    f64x2.mul)

  ;; i8x16.narrow_i16x8_s
  (func (export "i8x16.narrow_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_s)

  ;; i8x16.narrow_i16x8_u
  (func (export "i8x16.narrow_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.narrow_i16x8_u)

  ;; i16x8.narrow_i32x4_s
  (func (export "i16x8.narrow_i32x4_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_s)

  ;; i16x8.narrow_i32x4_u
  (func (export "i16x8.narrow_i32x4_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.narrow_i32x4_u)

  ;; i16x8.widen_low_i8x16_s
  (func (export "i16x8.widen_low_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_s)

  ;; i16x8.widen_high_i8x16_s
  (func (export "i16x8.widen_high_i8x16_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_s)

  ;; i16x8.widen_low_i8x16_u
  (func (export "i16x8.widen_low_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_low_i8x16_u)

  ;; i16x8.widen_high_i8x16_u
  (func (export "i16x8.widen_high_i8x16_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.widen_high_i8x16_u)

  ;; i32x4.widen_low_i16x8_s
  (func (export "i32x4.widen_low_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_s)

  ;; i32x4.widen_high_i16x8_s
  (func (export "i32x4.widen_high_i16x8_s") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_s)

  ;; i32x4.widen_low_i16x8_u
  (func (export "i32x4.widen_low_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_low_i16x8_u)

  ;; i32x4.widen_high_i16x8_u
  (func (export "i32x4.widen_high_i16x8_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.widen_high_i16x8_u)

  ;; v128.andnot
  (func (export "v128.andnot") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.andnot)

  ;; i8x16.avgr_u
  (func (export "i8x16.avgr_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.avgr_u)

  ;; i16x8.avgr_u
  (func (export "i16x8.avgr_u") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i16x8.avgr_u)
)

(;; STDOUT ;;;

simd-binary.wasm:	file format wasm 0x1

Code Disassembly:

000408 func[0] <i8x16_add_0>:
 000409: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000412: 00 03 00 00 00 04 00 00 00 | 
 00041b: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000424: 00 03 00 00 00 04 00 00 00 | 
 00042d: fd 6e                      | i8x16.add
 00042f: 0b                         | end
000431 func[1] <i16x8_add_0>:
 000432: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00043b: 00 03 00 00 00 04 00 00 00 | 
 000444: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00044d: 00 03 00 00 00 04 00 00 00 | 
 000456: fd 8e 01                   | i16x8.add
 000459: 0b                         | end
00045b func[2] <i32x4_add_0>:
 00045c: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000465: 00 03 00 00 00 04 00 00 00 | 
 00046e: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000477: 00 03 00 00 00 04 00 00 00 | 
 000480: fd ae 01                   | i32x4.add
 000483: 0b                         | end
000485 func[3] <i64x2_add_0>:
 000486: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00048f: 00 03 00 00 00 04 00 00 00 | 
 000498: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004a1: 00 03 00 00 00 04 00 00 00 | 
 0004aa: fd ce 01                   | i64x2.add
 0004ad: 0b                         | end
0004af func[4] <i8x16_sub_0>:
 0004b0: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004b9: 00 03 00 00 00 04 00 00 00 | 
 0004c2: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004cb: 00 03 00 00 00 04 00 00 00 | 
 0004d4: fd 71                      | i8x16.sub
 0004d6: 0b                         | end
0004d8 func[5] <i16x8_sub_0>:
 0004d9: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004e2: 00 03 00 00 00 04 00 00 00 | 
 0004eb: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0004f4: 00 03 00 00 00 04 00 00 00 | 
 0004fd: fd 91 01                   | i16x8.sub
 000500: 0b                         | end
000502 func[6] <i32x4_sub_0>:
 000503: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00050c: 00 03 00 00 00 04 00 00 00 | 
 000515: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00051e: 00 03 00 00 00 04 00 00 00 | 
 000527: fd b1 01                   | i32x4.sub
 00052a: 0b                         | end
00052c func[7] <i64x2_sub_0>:
 00052d: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000536: 00 03 00 00 00 04 00 00 00 | 
 00053f: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000548: 00 03 00 00 00 04 00 00 00 | 
 000551: fd d1 01                   | i64x2.sub
 000554: 0b                         | end
000556 func[8] <i16x8_mul_0>:
 000557: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000560: 00 03 00 00 00 04 00 00 00 | 
 000569: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000572: 00 03 00 00 00 04 00 00 00 | 
 00057b: fd 95 01                   | i16x8.mul
 00057e: 0b                         | end
000580 func[9] <i32x4_mul_0>:
 000581: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00058a: 00 03 00 00 00 04 00 00 00 | 
 000593: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00059c: 00 03 00 00 00 04 00 00 00 | 
 0005a5: fd b5 01                   | i32x4.mul
 0005a8: 0b                         | end
0005aa func[10] <i64x2_mul_0>:
 0005ab: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0005b4: 00 03 00 00 00 04 00 00 00 | 
 0005bd: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0005c6: 00 03 00 00 00 04 00 00 00 | 
 0005cf: fd d5 01                   | i64x2.mul
 0005d2: 0b                         | end
0005d4 func[11] <i8x16_add_saturate_signed_0>:
 0005d5: fd 0c 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x00000003 0x00000080
 0005de: 00 03 00 00 00 80 00 00 00 | 
 0005e7: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x000000ff
 0005f0: 00 03 00 00 00 ff 00 00 00 | 
 0005f9: fd 6f                      | i8x16.add_saturate_s
 0005fb: 0b                         | end
0005fd func[12] <i8x16_add_saturate_unsigned_0>:
 0005fe: fd 0c 01 00 ff 00 02 00 00 | v128.const 0x00ff0001 0x04000002 0x00000003 0x00000004
 000607: 04 03 00 00 00 04 00 00 00 | 
 000610: fd 0c 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000619: fe 03 00 00 00 04 00 00 00 | 
 000622: fd 70                      | i8x16.add_saturate_u
 000624: 0b                         | end
000626 func[13] <i16x8_add_saturate_signed_0>:
 000627: fd 0c 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x00000003 0x00008000
 000630: 00 03 00 00 00 00 80 00 00 | 
 000639: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x0000fffe
 000642: 00 03 00 00 00 fe ff 00 00 | 
 00064b: fd 8f 01                   | i16x8.add_saturate_s
 00064e: 0b                         | end
000650 func[14] <i16x8_add_saturate_unsigned_0>:
 000651: fd 0c ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 00065a: 04 03 00 00 00 04 00 00 00 | 
 000663: fd 0c 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 00066c: fe 03 00 00 00 04 00 00 00 | 
 000675: fd 90 01                   | i16x8.add_saturate_u
 000678: 0b                         | end
00067a func[15] <i8x16_sub_saturate_signed_0>:
 00067b: fd 0c 01 00 00 00 7f 00 00 | v128.const 0x00000001 0x0000007f 0x000000fe 0x00000080
 000684: 00 fe 00 00 00 80 00 00 00 | 
 00068d: fd 0c 01 00 00 00 fe 00 00 | v128.const 0x00000001 0x000000fe 0x0000007f 0x000000ff
 000696: 00 7f 00 00 00 ff 00 00 00 | 
 00069f: fd 72                      | i8x16.sub_saturate_s
 0006a1: 0b                         | end
0006a3 func[16] <i8x16_sub_saturate_unsigned_0>:
 0006a4: fd 0c 01 00 ff 00 7f 00 00 | v128.const 0x00ff0001 0x0400007f 0x0000fffe 0x00000004
 0006ad: 04 fe ff 00 00 04 00 00 00 | 
 0006b6: fd 0c 01 00 02 00 fe ff 00 | v128.const 0x00020001 0xfe00fffe 0x0000007f 0x00000004
 0006bf: fe 7f 00 00 00 04 00 00 00 | 
 0006c8: fd 73                      | i8x16.sub_saturate_u
 0006ca: 0b                         | end
0006cc func[17] <i16x8_sub_saturate_signed_0>:
 0006cd: fd 0c 01 00 00 00 ff 7f 00 | v128.const 0x00000001 0x00007fff 0x0000fffe 0x00008000
 0006d6: 00 fe ff 00 00 00 80 00 00 | 
 0006df: fd 0c 01 00 00 00 fe ff 00 | v128.const 0x00000001 0x0000fffe 0x00007fff 0x0000fffe
 0006e8: 00 ff 7f 00 00 fe ff 00 00 | 
 0006f1: fd 92 01                   | i16x8.sub_saturate_s
 0006f4: 0b                         | end
0006f6 func[18] <i16x8_sub_saturate_unsigned_0>:
 0006f7: fd 0c ff ff ff 00 ff ff 00 | v128.const 0x00ffffff 0x0400ffff 0x00000003 0x00000004
 000700: 04 03 00 00 00 04 00 00 00 | 
 000709: fd 0c 01 00 02 00 02 00 00 | v128.const 0x00020001 0xfe000002 0x00000003 0x00000004
 000712: fe 03 00 00 00 04 00 00 00 | 
 00071b: fd 93 01                   | i16x8.sub_saturate_u
 00071e: 0b                         | end
000720 func[19] <v128_and_0>:
 000721: fd 0c 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 00072a: 00 03 00 00 44 04 00 00 00 | 
 000733: fd 0c 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 00073c: 00 03 00 00 00 04 00 00 55 | 
 000745: fd 4e                      | v128.and
 000747: 0b                         | end
000749 func[20] <v128_or_0>:
 00074a: fd 0c 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 000753: 00 03 00 00 44 04 00 00 00 | 
 00075c: fd 0c 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 000765: 00 03 00 00 00 04 00 00 55 | 
 00076e: fd 50                      | v128.or
 000770: 0b                         | end
000772 func[21] <v128_xor_0>:
 000773: fd 0c 01 00 ff 00 02 00 04 | v128.const 0x00ff0001 0x00040002 0x44000003 0x00000004
 00077c: 00 03 00 00 44 04 00 00 00 | 
 000785: fd 0c 01 00 02 00 02 00 fe | v128.const 0x00020001 0x00fe0002 0x00000003 0x55000004
 00078e: 00 03 00 00 00 04 00 00 55 | 
 000797: fd 51                      | v128.xor
 000799: 0b                         | end
00079b func[22] <f32x4_min_0>:
 00079c: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0007a5: ff 00 50 9a 44 00 00 80 bf | 
 0007ae: fd 0c 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 0007b7: 3f 00 50 9a 44 00 00 80 3f | 
 0007c0: fd e8 01                   | f32x4.min
 0007c3: 0b                         | end
0007c5 func[23] <f64x2_min_0>:
 0007c6: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 0007cf: 00 00 00 00 00 00 00 f8 ff | 
 0007d8: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0007e1: c0 00 00 00 00 00 00 f0 3f | 
 0007ea: fd f4 01                   | f64x2.min
 0007ed: 0b                         | end
0007ef func[24] <f32x4_max_0>:
 0007f0: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0007f9: ff 00 50 9a 44 00 00 80 bf | 
 000802: fd 0c 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x449a5000 0x3f800000
 00080b: 3f 00 50 9a 44 00 00 80 3f | 
 000814: fd e9 01                   | f32x4.max
 000817: 0b                         | end
000819 func[25] <f64x2_max_0>:
 00081a: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000823: 00 00 00 00 00 00 00 f8 ff | 
 00082c: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000835: c0 00 00 00 00 00 00 f0 3f | 
 00083e: fd f5 01                   | f64x2.max
 000841: 0b                         | end
000843 func[26] <f32x4_add_0>:
 000844: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 00084d: ff 00 50 9a 44 00 50 9a c4 | 
 000856: fd 0c 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 00085f: 3f 00 00 80 3f 00 00 c0 3f | 
 000868: fd e4 01                   | f32x4.add
 00086b: 0b                         | end
00086d func[27] <f64x2_add_0>:
 00086e: fd 0c 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 000877: 3f 00 00 00 00 00 00 f8 ff | 
 000880: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000889: c0 00 00 00 00 00 00 f0 3f | 
 000892: fd f0 01                   | f64x2.add
 000895: 0b                         | end
000897 func[28] <f32x4_sub_0>:
 000898: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xc49a5000
 0008a1: ff 00 50 9a 44 00 50 9a c4 | 
 0008aa: fd 0c 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 0008b3: 3f 00 00 80 3f 00 00 c0 3f | 
 0008bc: fd e5 01                   | f32x4.sub
 0008bf: 0b                         | end
0008c1 func[29] <f64x2_sub_0>:
 0008c2: fd 0c 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xfff80000
 0008cb: 3f 00 00 00 00 00 00 f8 ff | 
 0008d4: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0008dd: c0 00 00 00 00 00 00 f0 3f | 
 0008e6: fd f1 01                   | f64x2.sub
 0008e9: 0b                         | end
0008eb func[30] <f32x4_div_0>:
 0008ec: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 0008f5: ff 00 00 c0 3f 00 00 40 c0 | 
 0008fe: fd 0c 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 000907: 3f 00 00 80 3f 00 00 c0 3f | 
 000910: fd e7 01                   | f32x4.div
 000913: 0b                         | end
000915 func[31] <f64x2_div_0>:
 000916: fd 0c 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 00091f: 3f 00 00 00 00 00 00 08 c0 | 
 000928: fd 0c 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 000931: 3f 00 00 00 00 00 00 f8 3f | 
 00093a: fd f3 01                   | f64x2.div
 00093d: 0b                         | end
00093f func[32] <f32x4_mul_0>:
 000940: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x3fc00000 0xc0400000
 000949: ff 00 00 c0 3f 00 00 40 c0 | 
 000952: fd 0c 00 00 00 00 00 00 80 | v128.const 0x00000000 0x3f800000 0x3f800000 0x3fc00000
 00095b: 3f 00 00 80 3f 00 00 c0 3f | 
 000964: fd e6 01                   | f32x4.mul
 000967: 0b                         | end
000969 func[33] <f64x2_mul_0>:
 00096a: fd 0c 00 00 00 00 00 00 f8 | v128.const 0x00000000 0x3ff80000 0x00000000 0xc0080000
 000973: 3f 00 00 00 00 00 00 08 c0 | 
 00097c: fd 0c 00 00 00 00 00 00 f0 | v128.const 0x00000000 0x3ff00000 0x00000000 0x3ff80000
 000985: 3f 00 00 00 00 00 00 f8 3f | 
 00098e: fd f2 01                   | f64x2.mul
 000991: 0b                         | end
000993 func[34] <i8x16.narrow_i16x8_s>:
 000994: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00099d: 00 03 00 00 00 04 00 00 00 | 
 0009a6: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009af: 00 03 00 00 00 04 00 00 00 | 
 0009b8: fd 65                      | i8x16.narrow_i16x8_s
 0009ba: 0b                         | end
0009bc func[35] <i8x16.narrow_i16x8_u>:
 0009bd: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009c6: 00 03 00 00 00 04 00 00 00 | 
 0009cf: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009d8: 00 03 00 00 00 04 00 00 00 | 
 0009e1: fd 66                      | i8x16.narrow_i16x8_u
 0009e3: 0b                         | end
0009e5 func[36] <i16x8.narrow_i32x4_s>:
 0009e6: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0009ef: 00 03 00 00 00 04 00 00 00 | 
 0009f8: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a01: 00 03 00 00 00 04 00 00 00 | 
 000a0a: fd 85 01                   | i16x8.narrow_i32x4_s
 000a0d: 0b                         | end
000a0f func[37] <i16x8.narrow_i32x4_u>:
 000a10: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a19: 00 03 00 00 00 04 00 00 00 | 
 000a22: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a2b: 00 03 00 00 00 04 00 00 00 | 
 000a34: fd 86 01                   | i16x8.narrow_i32x4_u
 000a37: 0b                         | end
000a39 func[38] <i16x8.widen_low_i8x16_s>:
 000a3a: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a43: 00 03 00 00 00 04 00 00 00 | 
 000a4c: fd 87 01                   | i16x8.widen_low_i8x16_s
 000a4f: 0b                         | end
000a51 func[39] <i16x8.widen_high_i8x16_s>:
 000a52: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a5b: 00 03 00 00 00 04 00 00 00 | 
 000a64: fd 88 01                   | i16x8.widen_high_i8x16_s
 000a67: 0b                         | end
000a69 func[40] <i16x8.widen_low_i8x16_u>:
 000a6a: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a73: 00 03 00 00 00 04 00 00 00 | 
 000a7c: fd 89 01                   | i16x8.widen_low_i8x16_u
 000a7f: 0b                         | end
000a81 func[41] <i16x8.widen_high_i8x16_u>:
 000a82: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000a8b: 00 03 00 00 00 04 00 00 00 | 
 000a94: fd 8a 01                   | i16x8.widen_high_i8x16_u
 000a97: 0b                         | end
000a99 func[42] <i32x4.widen_low_i16x8_s>:
 000a9a: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000aa3: 00 03 00 00 00 04 00 00 00 | 
 000aac: fd a7 01                   | i32x4.widen_low_i16x8_s
 000aaf: 0b                         | end
000ab1 func[43] <i32x4.widen_high_i16x8_s>:
 000ab2: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000abb: 00 03 00 00 00 04 00 00 00 | 
 000ac4: fd a8 01                   | i32x4.widen_high_i16x8_s
 000ac7: 0b                         | end
000ac9 func[44] <i32x4.widen_low_i16x8_u>:
 000aca: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000ad3: 00 03 00 00 00 04 00 00 00 | 
 000adc: fd a9 01                   | i32x4.widen_low_i16x8_u
 000adf: 0b                         | end
000ae1 func[45] <i32x4.widen_high_i16x8_u>:
 000ae2: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000aeb: 00 03 00 00 00 04 00 00 00 | 
 000af4: fd aa 01                   | i32x4.widen_high_i16x8_u
 000af7: 0b                         | end
000af9 func[46] <v128.andnot>:
 000afa: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b03: 00 03 00 00 00 04 00 00 00 | 
 000b0c: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b15: 00 03 00 00 00 04 00 00 00 | 
 000b1e: fd 4f                      | v128.andnot
 000b20: 0b                         | end
000b22 func[47] <i8x16.avgr_u>:
 000b23: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b2c: 00 03 00 00 00 04 00 00 00 | 
 000b35: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b3e: 00 03 00 00 00 04 00 00 00 | 
 000b47: fd 7b                      | i8x16.avgr_u
 000b49: 0b                         | end
000b4b func[48] <i16x8.avgr_u>:
 000b4c: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b55: 00 03 00 00 00 04 00 00 00 | 
 000b5e: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000b67: 00 03 00 00 00 04 00 00 00 | 
 000b70: fd 9b 01                   | i16x8.avgr_u
 000b73: 0b                         | end
;;; STDOUT ;;)
