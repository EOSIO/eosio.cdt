;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 neg
  (func (export "i8x16_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.neg)

  ;; i16x8 neg
  (func (export "i16x8_neg_0") (result v128)
    v128.const i32x4 0x0000ffff 0x00007fff 0x00000003 0x00000004
    i16x8.neg)

  ;; i32x4 neg
  (func (export "i32x4_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.neg)

  ;; i64x2 neg
  (func (export "i64x2_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.neg)

  ;; v128 not
  (func (export "v128_not_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    v128.not)

  ;; i8x16 any_true
  (func (export "i8x16_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i8x16.any_true)

  ;; i16x8 any_true
  (func (export "i16x8_any_true_0") (result i32)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    i16x8.any_true)

  ;; i32x4 any_true
  (func (export "i32x4_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.any_true)

  ;; i8x16 all_true
  (func (export "i8x16_all_true_0") (result i32)
    v128.const i32x4 0x01020304 0x01050706 0x10020403 0x20103004
    i8x16.all_true)

  ;; i16x8 all_true
  (func (export "i16x8_all_true_0") (result i32)
    v128.const i32x4 0x00040004 0x00030003 0x00020002 0x00010001
    i16x8.all_true)

  ;; i32x4 all_true
  (func (export "i32x4_all_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.all_true)

  ;; f32x4 neg
  (func (export "f32x4_neg_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.neg)

  ;; f64x2 neg
  (func (export "f64x2_neg_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    f64x2.neg)
  (func (export "f64x2_neg_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.neg)

  ;; f32x4 abs
  (func (export "f32x4_abs_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.abs)

  ;; f64x2 abs
  (func (export "f64x2_abs_0") (result v128)
    v128.const i32x4 0x00000000 0x80000000 0x00000000 0xfff80000
    f64x2.abs)
  (func (export "f64x2_abs_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.abs)

  ;; f32x4 sqrt
  (func (export "f32x4_sqrt_0") (result v128)
    v128.const i32x4 0xbf800000 0xffc00000 0x40800000 0x41100000
    f32x4.sqrt)

  ;; f64x2 sqrt
  (func (export "f64x2_sqrt_0") (result v128)
    v128.const i32x4 0x00000000 0xbff00000 0x00000000 0xfff80000
    f64x2.sqrt)
  (func (export "f64x2_sqrt_1") (result v128)
    v128.const i32x4 0x00000000 0x40100000 0x00000000 0x40220000
    f64x2.sqrt)

  ;; f32x4 convert_i32x4_s
  (func (export "f32x4_convert_i32x4_s_0") (result v128)
    v128.const i32x4 0x00000001 0xffffffff 0x00000000 0x00000003
    f32x4.convert_i32x4_s)

  ;; f32x4 convert_i32x4_u
  (func (export "f32x4_convert_i32x4_u_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000000 0x00000003
    f32x4.convert_i32x4_u)

  ;; i32x4 trunc_sat_f32x4_s
  (func (export "i32x4_trunc_sat_f32x4_s_0") (result v128)
    v128.const i32x4 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_s)

  ;; i32x4 trunc_sat_f32x4_u
  (func (export "i32x4_trunc_sat_f32x4_u_0") (result v128)
    v128.const i32x4 0x3fc00000 0x40900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_u)
)
(;; STDOUT ;;;

simd-unary.wasm:	file format wasm 0x1

Code Disassembly:

0001db func[0] <i8x16_neg_0>:
 0001dc: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 0001e5: 00 03 00 00 00 04 00 00 00 | 
 0001ee: fd 61                      | i8x16.neg
 0001f0: 0b                         | end
0001f2 func[1] <i16x8_neg_0>:
 0001f3: fd 0c ff ff 00 00 ff 7f 00 | v128.const 0x0000ffff 0x00007fff 0x00000003 0x00000004
 0001fc: 00 03 00 00 00 04 00 00 00 | 
 000205: fd 81 01                   | i16x8.neg
 000208: 0b                         | end
00020a func[2] <i32x4_neg_0>:
 00020b: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000214: 00 03 00 00 00 04 00 00 00 | 
 00021d: fd a1 01                   | i32x4.neg
 000220: 0b                         | end
000222 func[3] <i64x2_neg_0>:
 000223: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00022c: 00 03 00 00 00 04 00 00 00 | 
 000235: fd c1 01                   | i64x2.neg
 000238: 0b                         | end
00023a func[4] <v128_not_0>:
 00023b: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000244: 00 03 00 00 00 04 00 00 00 | 
 00024d: fd 4d                      | v128.not
 00024f: 0b                         | end
000251 func[5] <i8x16_any_true_0>:
 000252: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 00025b: 00 03 00 00 00 04 00 00 00 | 
 000264: fd 62                      | i8x16.any_true
 000266: 0b                         | end
000268 func[6] <i16x8_any_true_0>:
 000269: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0x00000000
 000272: 00 00 00 00 00 00 00 00 00 | 
 00027b: fd 82 01                   | i16x8.any_true
 00027e: 0b                         | end
000280 func[7] <i32x4_any_true_0>:
 000281: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 00028a: 00 03 00 00 00 04 00 00 00 | 
 000293: fd a2 01                   | i32x4.any_true
 000296: 0b                         | end
000298 func[8] <i8x16_all_true_0>:
 000299: fd 0c 04 03 02 01 06 07 05 | v128.const 0x01020304 0x01050706 0x10020403 0x20103004
 0002a2: 01 03 04 02 10 04 30 10 20 | 
 0002ab: fd 63                      | i8x16.all_true
 0002ad: 0b                         | end
0002af func[9] <i16x8_all_true_0>:
 0002b0: fd 0c 04 00 04 00 03 00 03 | v128.const 0x00040004 0x00030003 0x00020002 0x00010001
 0002b9: 00 02 00 02 00 01 00 01 00 | 
 0002c2: fd 83 01                   | i16x8.all_true
 0002c5: 0b                         | end
0002c7 func[10] <i32x4_all_true_0>:
 0002c8: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 0002d1: 00 03 00 00 00 04 00 00 00 | 
 0002da: fd a3 01                   | i32x4.all_true
 0002dd: 0b                         | end
0002df func[11] <f32x4_neg_0>:
 0002e0: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0002e9: ff 00 50 9a 44 00 00 80 bf | 
 0002f2: fd e1 01                   | f32x4.neg
 0002f5: 0b                         | end
0002f7 func[12] <f64x2_neg_0>:
 0002f8: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000301: 00 00 00 00 00 00 00 f8 ff | 
 00030a: fd ed 01                   | f64x2.neg
 00030d: 0b                         | end
00030f func[13] <f64x2_neg_1>:
 000310: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000319: c0 00 00 00 00 00 00 f0 3f | 
 000322: fd ed 01                   | f64x2.neg
 000325: 0b                         | end
000327 func[14] <f32x4_abs_0>:
 000328: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 000331: ff 00 50 9a 44 00 00 80 bf | 
 00033a: fd e0 01                   | f32x4.abs
 00033d: 0b                         | end
00033f func[15] <f64x2_abs_0>:
 000340: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x80000000 0x00000000 0xfff80000
 000349: 80 00 00 00 00 00 00 f8 ff | 
 000352: fd ec 01                   | f64x2.abs
 000355: 0b                         | end
000357 func[16] <f64x2_abs_1>:
 000358: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000361: c0 00 00 00 00 00 00 f0 3f | 
 00036a: fd ec 01                   | f64x2.abs
 00036d: 0b                         | end
00036f func[17] <f32x4_sqrt_0>:
 000370: fd 0c 00 00 80 bf 00 00 c0 | v128.const 0xbf800000 0xffc00000 0x40800000 0x41100000
 000379: ff 00 00 80 40 00 00 10 41 | 
 000382: fd e3 01                   | f32x4.sqrt
 000385: 0b                         | end
000387 func[18] <f64x2_sqrt_0>:
 000388: fd 0c 00 00 00 00 00 00 f0 | v128.const 0x00000000 0xbff00000 0x00000000 0xfff80000
 000391: bf 00 00 00 00 00 00 f8 ff | 
 00039a: fd ef 01                   | f64x2.sqrt
 00039d: 0b                         | end
00039f func[19] <f64x2_sqrt_1>:
 0003a0: fd 0c 00 00 00 00 00 00 10 | v128.const 0x00000000 0x40100000 0x00000000 0x40220000
 0003a9: 40 00 00 00 00 00 00 22 40 | 
 0003b2: fd ef 01                   | f64x2.sqrt
 0003b5: 0b                         | end
0003b7 func[20] <f32x4_convert_i32x4_s_0>:
 0003b8: fd 0c 01 00 00 00 ff ff ff | v128.const 0x00000001 0xffffffff 0x00000000 0x00000003
 0003c1: ff 00 00 00 00 03 00 00 00 | 
 0003ca: fd fa 01                   | f32x4.convert_i32x4_s
 0003cd: 0b                         | end
0003cf func[21] <f32x4_convert_i32x4_u_0>:
 0003d0: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000000 0x00000003
 0003d9: 00 00 00 00 00 03 00 00 00 | 
 0003e2: fd fb 01                   | f32x4.convert_i32x4_u
 0003e5: 0b                         | end
0003e7 func[22] <i32x4_trunc_sat_f32x4_s_0>:
 0003e8: fd 0c 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
 0003f1: c0 00 00 c0 ff 9a 59 9a 44 | 
 0003fa: fd f8 01                   | i32x4.trunc_sat_f32x4_s
 0003fd: 0b                         | end
0003ff func[23] <i32x4_trunc_sat_f32x4_u_0>:
 000400: fd 0c 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0x40900000 0xffc00000 0x449a599a
 000409: 40 00 00 c0 ff 9a 59 9a 44 | 
 000412: fd f9 01                   | i32x4.trunc_sat_f32x4_u
 000415: 0b                         | end
;;; STDOUT ;;)
