;;; TOOL: run-objdump
;;; ARGS0: --enable-simd

(module
  ;; i8x16 neg
  (func (export "i8x16_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i8x16.neg)

  ;; i16x8 neg
  (func (export "i16x8_neg_0") (result v128)
    v128.const i32x4 0x0000ffff 0x00007fff 0x00000003 0x00000004
    i16x8.neg)

  ;; i32x4 neg
  (func (export "i32x4_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i32x4.neg)

  ;; i64x2 neg
  (func (export "i64x2_neg_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000003 0x00000004
    i64x2.neg)

  ;; v128 not
  (func (export "v128_not_0") (result v128)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    v128.not)

  ;; i8x16 any_true
  (func (export "i8x16_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i8x16.any_true)

  ;; i16x8 any_true
  (func (export "i16x8_any_true_0") (result i32)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    i16x8.any_true)

  ;; i32x4 any_true
  (func (export "i32x4_any_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.any_true)

  ;; i8x16 all_true
  (func (export "i8x16_all_true_0") (result i32)
    v128.const i32x4 0x01020304 0x01050706 0x10020403 0x20103004
    i8x16.all_true)

  ;; i16x8 all_true
  (func (export "i16x8_all_true_0") (result i32)
    v128.const i32x4 0x00040004 0x00030003 0x00020002 0x00010001
    i16x8.all_true)

  ;; i32x4 all_true
  (func (export "i32x4_all_true_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.all_true)

  ;; i8x16 bitmask
  (func (export "i8x16_bitmask_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i8x16.bitmask)

  ;; i16x8 bitmask
  (func (export "i16x8_bitmask_0") (result i32)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    i16x8.bitmask)

  ;; i32x4 bitmask
  (func (export "i32x4_bitmask_0") (result i32)
    v128.const i32x4 0x00ff0001 0x00550002 0x00000003 0x00000004
    i32x4.bitmask)

  ;; f32x4 neg
  (func (export "f32x4_neg_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.neg)

  ;; f64x2 neg
  (func (export "f64x2_neg_0") (result v128)
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0xfff80000
    f64x2.neg)
  (func (export "f64x2_neg_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.neg)

  ;; f32x4 abs
  (func (export "f32x4_abs_0") (result v128)
    v128.const i32x4 0x80000000 0xffc00000 0x449a5000 0xbf800000
    f32x4.abs)

  ;; f64x2 abs
  (func (export "f64x2_abs_0") (result v128)
    v128.const i32x4 0x00000000 0x80000000 0x00000000 0xfff80000
    f64x2.abs)
  (func (export "f64x2_abs_1") (result v128)
    v128.const i32x4 0x00000000 0xc0934a00 0x00000000 0x3ff00000
    f64x2.abs)

  ;; f32x4 sqrt
  (func (export "f32x4_sqrt_0") (result v128)
    v128.const i32x4 0xbf800000 0xffc00000 0x40800000 0x41100000
    f32x4.sqrt)

  ;; f64x2 sqrt
  (func (export "f64x2_sqrt_0") (result v128)
    v128.const i32x4 0x00000000 0xbff00000 0x00000000 0xfff80000
    f64x2.sqrt)
  (func (export "f64x2_sqrt_1") (result v128)
    v128.const i32x4 0x00000000 0x40100000 0x00000000 0x40220000
    f64x2.sqrt)

  ;; f32x4 convert_i32x4_s
  (func (export "f32x4_convert_i32x4_s_0") (result v128)
    v128.const i32x4 0x00000001 0xffffffff 0x00000000 0x00000003
    f32x4.convert_i32x4_s)

  ;; f32x4 convert_i32x4_u
  (func (export "f32x4_convert_i32x4_u_0") (result v128)
    v128.const i32x4 0x00000001 0x00000002 0x00000000 0x00000003
    f32x4.convert_i32x4_u)

  ;; i32x4 trunc_sat_f32x4_s
  (func (export "i32x4_trunc_sat_f32x4_s_0") (result v128)
    v128.const i32x4 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_s)

  ;; i32x4 trunc_sat_f32x4_u
  (func (export "i32x4_trunc_sat_f32x4_u_0") (result v128)
    v128.const i32x4 0x3fc00000 0x40900000 0xffc00000 0x449a599a
    i32x4.trunc_sat_f32x4_u)
)
(;; STDOUT ;;;

simd-unary.wasm:	file format wasm 0x1

Code Disassembly:

000214 func[0] <i8x16_neg_0>:
 000215: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00021e: 00 03 00 00 00 04 00 00 00 | 
 000227: fd 61                      | i8x16.neg
 000229: 0b                         | end
00022b func[1] <i16x8_neg_0>:
 00022c: fd 0c ff ff 00 00 ff 7f 00 | v128.const 0x0000ffff 0x00007fff 0x00000003 0x00000004
 000235: 00 03 00 00 00 04 00 00 00 | 
 00023e: fd 81 01                   | i16x8.neg
 000241: 0b                         | end
000243 func[2] <i32x4_neg_0>:
 000244: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 00024d: 00 03 00 00 00 04 00 00 00 | 
 000256: fd a1 01                   | i32x4.neg
 000259: 0b                         | end
00025b func[3] <i64x2_neg_0>:
 00025c: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
 000265: 00 03 00 00 00 04 00 00 00 | 
 00026e: fd c1 01                   | i64x2.neg
 000271: 0b                         | end
000273 func[4] <v128_not_0>:
 000274: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 00027d: 00 03 00 00 00 04 00 00 00 | 
 000286: fd 4d                      | v128.not
 000288: 0b                         | end
00028a func[5] <i8x16_any_true_0>:
 00028b: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000294: 00 03 00 00 00 04 00 00 00 | 
 00029d: fd 62                      | i8x16.any_true
 00029f: 0b                         | end
0002a1 func[6] <i16x8_any_true_0>:
 0002a2: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0x00000000
 0002ab: 00 00 00 00 00 00 00 00 00 | 
 0002b4: fd 82 01                   | i16x8.any_true
 0002b7: 0b                         | end
0002b9 func[7] <i32x4_any_true_0>:
 0002ba: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 0002c3: 00 03 00 00 00 04 00 00 00 | 
 0002cc: fd a2 01                   | i32x4.any_true
 0002cf: 0b                         | end
0002d1 func[8] <i8x16_all_true_0>:
 0002d2: fd 0c 04 03 02 01 06 07 05 | v128.const 0x01020304 0x01050706 0x10020403 0x20103004
 0002db: 01 03 04 02 10 04 30 10 20 | 
 0002e4: fd 63                      | i8x16.all_true
 0002e6: 0b                         | end
0002e8 func[9] <i16x8_all_true_0>:
 0002e9: fd 0c 04 00 04 00 03 00 03 | v128.const 0x00040004 0x00030003 0x00020002 0x00010001
 0002f2: 00 02 00 02 00 01 00 01 00 | 
 0002fb: fd 83 01                   | i16x8.all_true
 0002fe: 0b                         | end
000300 func[10] <i32x4_all_true_0>:
 000301: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 00030a: 00 03 00 00 00 04 00 00 00 | 
 000313: fd a3 01                   | i32x4.all_true
 000316: 0b                         | end
000318 func[11] <i8x16_bitmask_0>:
 000319: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000322: 00 03 00 00 00 04 00 00 00 | 
 00032b: fd 64                      | i8x16.bitmask
 00032d: 0b                         | end
00032f func[12] <i16x8_bitmask_0>:
 000330: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0x00000000
 000339: 00 00 00 00 00 00 00 00 00 | 
 000342: fd 84 01                   | i16x8.bitmask
 000345: 0b                         | end
000347 func[13] <i32x4_bitmask_0>:
 000348: fd 0c 01 00 ff 00 02 00 55 | v128.const 0x00ff0001 0x00550002 0x00000003 0x00000004
 000351: 00 03 00 00 00 04 00 00 00 | 
 00035a: fd a4 01                   | i32x4.bitmask
 00035d: 0b                         | end
00035f func[14] <f32x4_neg_0>:
 000360: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 000369: ff 00 50 9a 44 00 00 80 bf | 
 000372: fd e1 01                   | f32x4.neg
 000375: 0b                         | end
000377 func[15] <f64x2_neg_0>:
 000378: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x00000000 0x00000000 0xfff80000
 000381: 00 00 00 00 00 00 00 f8 ff | 
 00038a: fd ed 01                   | f64x2.neg
 00038d: 0b                         | end
00038f func[16] <f64x2_neg_1>:
 000390: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 000399: c0 00 00 00 00 00 00 f0 3f | 
 0003a2: fd ed 01                   | f64x2.neg
 0003a5: 0b                         | end
0003a7 func[17] <f32x4_abs_0>:
 0003a8: fd 0c 00 00 00 80 00 00 c0 | v128.const 0x80000000 0xffc00000 0x449a5000 0xbf800000
 0003b1: ff 00 50 9a 44 00 00 80 bf | 
 0003ba: fd e0 01                   | f32x4.abs
 0003bd: 0b                         | end
0003bf func[18] <f64x2_abs_0>:
 0003c0: fd 0c 00 00 00 00 00 00 00 | v128.const 0x00000000 0x80000000 0x00000000 0xfff80000
 0003c9: 80 00 00 00 00 00 00 f8 ff | 
 0003d2: fd ec 01                   | f64x2.abs
 0003d5: 0b                         | end
0003d7 func[19] <f64x2_abs_1>:
 0003d8: fd 0c 00 00 00 00 00 4a 93 | v128.const 0x00000000 0xc0934a00 0x00000000 0x3ff00000
 0003e1: c0 00 00 00 00 00 00 f0 3f | 
 0003ea: fd ec 01                   | f64x2.abs
 0003ed: 0b                         | end
0003ef func[20] <f32x4_sqrt_0>:
 0003f0: fd 0c 00 00 80 bf 00 00 c0 | v128.const 0xbf800000 0xffc00000 0x40800000 0x41100000
 0003f9: ff 00 00 80 40 00 00 10 41 | 
 000402: fd e3 01                   | f32x4.sqrt
 000405: 0b                         | end
000407 func[21] <f64x2_sqrt_0>:
 000408: fd 0c 00 00 00 00 00 00 f0 | v128.const 0x00000000 0xbff00000 0x00000000 0xfff80000
 000411: bf 00 00 00 00 00 00 f8 ff | 
 00041a: fd ef 01                   | f64x2.sqrt
 00041d: 0b                         | end
00041f func[22] <f64x2_sqrt_1>:
 000420: fd 0c 00 00 00 00 00 00 10 | v128.const 0x00000000 0x40100000 0x00000000 0x40220000
 000429: 40 00 00 00 00 00 00 22 40 | 
 000432: fd ef 01                   | f64x2.sqrt
 000435: 0b                         | end
000437 func[23] <f32x4_convert_i32x4_s_0>:
 000438: fd 0c 01 00 00 00 ff ff ff | v128.const 0x00000001 0xffffffff 0x00000000 0x00000003
 000441: ff 00 00 00 00 03 00 00 00 | 
 00044a: fd fa 01                   | f32x4.convert_i32x4_s
 00044d: 0b                         | end
00044f func[24] <f32x4_convert_i32x4_u_0>:
 000450: fd 0c 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000000 0x00000003
 000459: 00 00 00 00 00 03 00 00 00 | 
 000462: fd fb 01                   | f32x4.convert_i32x4_u
 000465: 0b                         | end
000467 func[25] <i32x4_trunc_sat_f32x4_s_0>:
 000468: fd 0c 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0xc0900000 0xffc00000 0x449a599a
 000471: c0 00 00 c0 ff 9a 59 9a 44 | 
 00047a: fd f8 01                   | i32x4.trunc_sat_f32x4_s
 00047d: 0b                         | end
00047f func[26] <i32x4_trunc_sat_f32x4_u_0>:
 000480: fd 0c 00 00 c0 3f 00 00 90 | v128.const 0x3fc00000 0x40900000 0xffc00000 0x449a599a
 000489: 40 00 00 c0 ff 9a 59 9a 44 | 
 000492: fd f9 01                   | i32x4.trunc_sat_f32x4_u
 000495: 0b                         | end
;;; STDOUT ;;)
