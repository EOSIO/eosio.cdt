;;; TOOL: run-roundtrip
;;; ARGS: --stdout --reloc
(module
  ;; 64 random types to force the block type below to get encoded as sleb
  (type (func (param f32 f32 f32 f32 f32 f32)))
  (type (func (param i32 f32 f32 f32 f32 f32)))
  (type (func (param f32 i32 f32 f32 f32 f32)))
  (type (func (param i32 i32 f32 f32 f32 f32)))
  (type (func (param f32 f32 i32 f32 f32 f32)))
  (type (func (param i32 f32 i32 f32 f32 f32)))
  (type (func (param f32 i32 i32 f32 f32 f32)))
  (type (func (param i32 i32 i32 f32 f32 f32)))
  (type (func (param f32 f32 f32 i32 f32 f32)))
  (type (func (param i32 f32 f32 i32 f32 f32)))
  (type (func (param f32 i32 f32 i32 f32 f32)))
  (type (func (param i32 i32 f32 i32 f32 f32)))
  (type (func (param f32 f32 i32 i32 f32 f32)))
  (type (func (param i32 f32 i32 i32 f32 f32)))
  (type (func (param f32 i32 i32 i32 f32 f32)))
  (type (func (param i32 i32 i32 i32 f32 f32)))
  (type (func (param f32 f32 f32 f32 i32 f32)))
  (type (func (param i32 f32 f32 f32 i32 f32)))
  (type (func (param f32 i32 f32 f32 i32 f32)))
  (type (func (param i32 i32 f32 f32 i32 f32)))
  (type (func (param f32 f32 i32 f32 i32 f32)))
  (type (func (param i32 f32 i32 f32 i32 f32)))
  (type (func (param f32 i32 i32 f32 i32 f32)))
  (type (func (param i32 i32 i32 f32 i32 f32)))
  (type (func (param f32 f32 f32 i32 i32 f32)))
  (type (func (param i32 f32 f32 i32 i32 f32)))
  (type (func (param f32 i32 f32 i32 i32 f32)))
  (type (func (param i32 i32 f32 i32 i32 f32)))
  (type (func (param f32 f32 i32 i32 i32 f32)))
  (type (func (param i32 f32 i32 i32 i32 f32)))
  (type (func (param f32 i32 i32 i32 i32 f32)))
  (type (func (param i32 i32 i32 i32 i32 f32)))
  (type (func (param f32 f32 f32 f32 f32 i32)))
  (type (func (param i32 f32 f32 f32 f32 i32)))
  (type (func (param f32 i32 f32 f32 f32 i32)))
  (type (func (param i32 i32 f32 f32 f32 i32)))
  (type (func (param f32 f32 i32 f32 f32 i32)))
  (type (func (param i32 f32 i32 f32 f32 i32)))
  (type (func (param f32 i32 i32 f32 f32 i32)))
  (type (func (param i32 i32 i32 f32 f32 i32)))
  (type (func (param f32 f32 f32 i32 f32 i32)))
  (type (func (param i32 f32 f32 i32 f32 i32)))
  (type (func (param f32 i32 f32 i32 f32 i32)))
  (type (func (param i32 i32 f32 i32 f32 i32)))
  (type (func (param f32 f32 i32 i32 f32 i32)))
  (type (func (param i32 f32 i32 i32 f32 i32)))
  (type (func (param f32 i32 i32 i32 f32 i32)))
  (type (func (param i32 i32 i32 i32 f32 i32)))
  (type (func (param f32 f32 f32 f32 i32 i32)))
  (type (func (param i32 f32 f32 f32 i32 i32)))
  (type (func (param f32 i32 f32 f32 i32 i32)))
  (type (func (param i32 i32 f32 f32 i32 i32)))
  (type (func (param f32 f32 i32 f32 i32 i32)))
  (type (func (param i32 f32 i32 f32 i32 i32)))
  (type (func (param f32 i32 i32 f32 i32 i32)))
  (type (func (param i32 i32 i32 f32 i32 i32)))
  (type (func (param f32 f32 f32 i32 i32 i32)))
  (type (func (param i32 f32 f32 i32 i32 i32)))
  (type (func (param f32 i32 f32 i32 i32 i32)))
  (type (func (param i32 i32 f32 i32 i32 i32)))
  (type (func (param f32 f32 i32 i32 i32 i32)))
  (type (func (param i32 f32 i32 i32 i32 i32)))
  (type (func (param f32 i32 i32 i32 i32 i32)))
  (type (func (param i32 i32 i32 i32 i32 i32)))

  (func (result i32)
    (i32.add
      (block (result i32 i32)
        (i32.const 32)
        (i32.const 10)))))
(;; STDOUT ;;;
(module
  (type (;0;) (func (param f32 f32 f32 f32 f32 f32)))
  (type (;1;) (func (param i32 f32 f32 f32 f32 f32)))
  (type (;2;) (func (param f32 i32 f32 f32 f32 f32)))
  (type (;3;) (func (param i32 i32 f32 f32 f32 f32)))
  (type (;4;) (func (param f32 f32 i32 f32 f32 f32)))
  (type (;5;) (func (param i32 f32 i32 f32 f32 f32)))
  (type (;6;) (func (param f32 i32 i32 f32 f32 f32)))
  (type (;7;) (func (param i32 i32 i32 f32 f32 f32)))
  (type (;8;) (func (param f32 f32 f32 i32 f32 f32)))
  (type (;9;) (func (param i32 f32 f32 i32 f32 f32)))
  (type (;10;) (func (param f32 i32 f32 i32 f32 f32)))
  (type (;11;) (func (param i32 i32 f32 i32 f32 f32)))
  (type (;12;) (func (param f32 f32 i32 i32 f32 f32)))
  (type (;13;) (func (param i32 f32 i32 i32 f32 f32)))
  (type (;14;) (func (param f32 i32 i32 i32 f32 f32)))
  (type (;15;) (func (param i32 i32 i32 i32 f32 f32)))
  (type (;16;) (func (param f32 f32 f32 f32 i32 f32)))
  (type (;17;) (func (param i32 f32 f32 f32 i32 f32)))
  (type (;18;) (func (param f32 i32 f32 f32 i32 f32)))
  (type (;19;) (func (param i32 i32 f32 f32 i32 f32)))
  (type (;20;) (func (param f32 f32 i32 f32 i32 f32)))
  (type (;21;) (func (param i32 f32 i32 f32 i32 f32)))
  (type (;22;) (func (param f32 i32 i32 f32 i32 f32)))
  (type (;23;) (func (param i32 i32 i32 f32 i32 f32)))
  (type (;24;) (func (param f32 f32 f32 i32 i32 f32)))
  (type (;25;) (func (param i32 f32 f32 i32 i32 f32)))
  (type (;26;) (func (param f32 i32 f32 i32 i32 f32)))
  (type (;27;) (func (param i32 i32 f32 i32 i32 f32)))
  (type (;28;) (func (param f32 f32 i32 i32 i32 f32)))
  (type (;29;) (func (param i32 f32 i32 i32 i32 f32)))
  (type (;30;) (func (param f32 i32 i32 i32 i32 f32)))
  (type (;31;) (func (param i32 i32 i32 i32 i32 f32)))
  (type (;32;) (func (param f32 f32 f32 f32 f32 i32)))
  (type (;33;) (func (param i32 f32 f32 f32 f32 i32)))
  (type (;34;) (func (param f32 i32 f32 f32 f32 i32)))
  (type (;35;) (func (param i32 i32 f32 f32 f32 i32)))
  (type (;36;) (func (param f32 f32 i32 f32 f32 i32)))
  (type (;37;) (func (param i32 f32 i32 f32 f32 i32)))
  (type (;38;) (func (param f32 i32 i32 f32 f32 i32)))
  (type (;39;) (func (param i32 i32 i32 f32 f32 i32)))
  (type (;40;) (func (param f32 f32 f32 i32 f32 i32)))
  (type (;41;) (func (param i32 f32 f32 i32 f32 i32)))
  (type (;42;) (func (param f32 i32 f32 i32 f32 i32)))
  (type (;43;) (func (param i32 i32 f32 i32 f32 i32)))
  (type (;44;) (func (param f32 f32 i32 i32 f32 i32)))
  (type (;45;) (func (param i32 f32 i32 i32 f32 i32)))
  (type (;46;) (func (param f32 i32 i32 i32 f32 i32)))
  (type (;47;) (func (param i32 i32 i32 i32 f32 i32)))
  (type (;48;) (func (param f32 f32 f32 f32 i32 i32)))
  (type (;49;) (func (param i32 f32 f32 f32 i32 i32)))
  (type (;50;) (func (param f32 i32 f32 f32 i32 i32)))
  (type (;51;) (func (param i32 i32 f32 f32 i32 i32)))
  (type (;52;) (func (param f32 f32 i32 f32 i32 i32)))
  (type (;53;) (func (param i32 f32 i32 f32 i32 i32)))
  (type (;54;) (func (param f32 i32 i32 f32 i32 i32)))
  (type (;55;) (func (param i32 i32 i32 f32 i32 i32)))
  (type (;56;) (func (param f32 f32 f32 i32 i32 i32)))
  (type (;57;) (func (param i32 f32 f32 i32 i32 i32)))
  (type (;58;) (func (param f32 i32 f32 i32 i32 i32)))
  (type (;59;) (func (param i32 i32 f32 i32 i32 i32)))
  (type (;60;) (func (param f32 f32 i32 i32 i32 i32)))
  (type (;61;) (func (param i32 f32 i32 i32 i32 i32)))
  (type (;62;) (func (param f32 i32 i32 i32 i32 i32)))
  (type (;63;) (func (param i32 i32 i32 i32 i32 i32)))
  (type (;64;) (func (result i32)))
  (type (;65;) (func (result i32 i32)))
  (func (;0;) (type 64) (result i32)
    block (result i32 i32)  ;; label = @1
      i32.const 32
      i32.const 10
    end
    i32.add))
;;; STDOUT ;;)
