#include <clang/Tooling/Tooling.h>
#include <llvm/Support/CommandLine.h>
#include <llvm/Support/FileSystem.h>
#include <llvm/Support/Path.h>

#include <eosio/abigen.hpp>
#include <eosio/codegen.hpp>
#include <blanc/custom_attrs.hpp>

#define CPP_COMP 1
#define COMPILER_NAME "@BLANC_CXX_COMPILER@"
#define LINKER_NAME "@BLANC_LINKER@"
#define COMPILER_BACKEND "@BLANC_CXX_COMPILER_BACKEND@"
#define COMPILER_BACKEND_PREFERRED "@BLANC_CXX_COMPILER_BACKEND_PREFERRED@"
#include <compiler_options.hpp>

void handle_empty_abigen(const std::string& contract_name, bool has_o_opt, bool has_contract_opt);

void generate(const std::vector<std::string>& base_options, std::string input, std::string contract_name, const std::vector<std::string>& resource_paths, const std::pair<int, int>& abi_version, bool abigen, bool suppress_ricardian_warning, bool has_o_opt, bool has_contract_opt, bool warn_action_read_only) {
   std::vector<std::string> options;
   options.push_back(COMPILER_NAME);
   options.push_back(input); // don't remove oddity of CommonOptionsParser?
   options.push_back(input);
   options.push_back("--");
   if (llvm::sys::path::extension(input).equals(".c"))
      options.push_back("-xc++");
   for (size_t i=0; i < base_options.size(); i++) {
      options.push_back(base_options[i]);
   }
   options.push_back("-Wno-everything");

   int size = options.size();
   const char** new_argv = new const char*[size];
   for (size_t i=0; i < size; i++)
      new_argv[i] = options[i].c_str();

   CommonOptionsParser opts( size, new_argv, EosioCompilerToolCategory, 0 );
   ClangTool ctool(opts.getCompilations(), opts.getSourcePathList());

   abigen::get().set_contract_name(contract_name);
   abigen::get().set_resource_dirs(resource_paths);
   abigen::get().set_abi_version(std::get<0>(abi_version), std::get<1>(abi_version));
   abigen::get().set_suppress_ricardian_warning(suppress_ricardian_warning);
   codegen::get().set_contract_name(contract_name);
   codegen::get().set_warn_action_read_only(warn_action_read_only);

   int tool_run = -1;
   tool_run = ctool.run(newFrontendActionFactory<eosio_codegen_frontend_action>().get());
   if (tool_run != 0) {
      throw std::runtime_error("codegen error");
   }

   tool_run = ctool.run(newFrontendActionFactory<eosio_abigen_frontend_action>().get());
   if (tool_run != 0) {
      throw std::runtime_error("abigen error");
   }

   if (!abigen::get().is_empty()) {
      std::ofstream ofs (codegen::get().output+".desc");
      if (!ofs) throw;
      ofs << abigen::get().to_json_debug().serialize();
      ofs.close();
   } else if (abigen) {
      handle_empty_abigen(contract_name, has_o_opt, has_contract_opt);
   }
}

void handle_empty_abigen(const std::string& contract_name, bool has_o_opt, bool has_contract_opt) {
   const std::string& parsed_contract_name = abigen::get().get_parsed_contract_name();
   if (parsed_contract_name.empty()) {
      // if no contract name could be obtained by parsing methods/records, it means the contract is empty
      std::cout << "Warning, contract is empty and ABI is not generated\n";
   } else if (contract_name != parsed_contract_name) {
      // if contract is empty but the contract file contains other contracts, the parsed contract name could be wrong
      std::string err = "abigen error: contract is empty, or ";
      // or, the contract is not empty but the specified or inferred contract name is wrong
      err += has_contract_opt ? "'--contract' specified name" : (has_o_opt ? "'-o' specified name" : "contract filename");
      err += " doesn't match the real contract name";
      throw std::runtime_error(err);
   } else {
      throw std::runtime_error("abigen error"); // unknown error
   }
}

int main(int argc, const char** argv) {
   std::vector<std::string> backends = { COMPILER_BACKEND_PREFERRED, COMPILER_BACKEND };

   if (std::find(argv, argv+argc, std::string("-v")) != argv+argc) {
      eosio::cdt::environment::exec_subprogram(backends, {"-v"});
      return 0;
   }

   llvm::cl::SetVersionPrinter([](llvm::raw_ostream& os) {
      os << COMPILER_NAME << " version " << "@VERSION_FULL@" << "\n";
   });
   llvm::cl::ParseCommandLineOptions(argc, argv, std::string(COMPILER_NAME)+" (Eosio C++ -> WebAssembly compiler)");
   Options opts = CreateOptions();

   std::vector<std::string> outputs;

   if (opts.inputs.size() > 1 && !opts.flags.link && !opts.output_fn.empty()) {
      llvm::errs() << COMPILER_NAME << ": error: cannot specify -o when generating multiple output files" << '\n';
      return -1;
   }

   try {
      for (auto input : opts.inputs) {
         std::vector<std::string> new_opts = opts.comp_options;
         std::string output;

         // TODO: Handle pp_only
         auto input_fullpath = string_to_fullpath(input);

         if (!opts.flags.link) {
            if (!opts.output_fn.empty()) {
               output = opts.output_fn;
            } else {
               llvm::SmallString<PATH_MAX> fn = llvm::sys::path::filename(input);
               llvm::sys::path::replace_extension(fn, ".o");
               output = fn.str().str();
            }
         } else {
            auto ifs = input_fullpath.str().str();
            output = get_temporary_path(std::to_string(std::hash<std::string>{}(ifs))+".o");
         }

         output = string_to_fullpath(output).str().str();

         codegen::get().output = output;
         generate(opts.comp_options, input, opts.abigen_contract, opts.abigen_resources, opts.abi_version, opts.flags.abigen, opts.flags.suppress_ricardian_warning, opts.flags.has_o_opt, opts.flags.has_contract_opt, opts.flags.warn_action_read_only);

         auto tmp_file = get_temporary_path(std::to_string(std::hash<std::string>{}(output))+".cpp");
         if (llvm::sys::fs::exists(tmp_file)) {
            input = tmp_file;
         }

         auto input_fulldir = input_fullpath;
         llvm::sys::path::remove_filename(input_fulldir);
         new_opts.insert(new_opts.end(), "-I" + input_fulldir.str().str());

         new_opts.insert(new_opts.begin(), input);

         new_opts.insert(new_opts.begin(), output);
         new_opts.insert(new_opts.begin(), "-o");
         outputs.push_back(output);

         if (!eosio::cdt::environment::exec_subprogram(backends, new_opts)) {
            llvm::sys::fs::remove(tmp_file);
            return -1;
         }
         llvm::sys::fs::remove(tmp_file);
      }
   } catch (std::runtime_error& err) {
      llvm::errs() << err.what() << '\n';
      return -1;
   }

   if (opts.flags.link) {
      std::vector<std::string> new_opts = opts.ld_options;
      if (opts.flags.implicit_output && !opts.output_fn.empty()) {
         new_opts.insert(new_opts.begin(), opts.output_fn);
         new_opts.insert(new_opts.begin(), "-o");
      }
      for (auto input : outputs) {
         new_opts.insert(new_opts.begin(), input);
      }
   
      if (!eosio::cdt::environment::exec_subprogram(LINKER_NAME, new_opts)) {
         for (auto input : outputs) {
            llvm::sys::fs::remove(input);
         }
         return -1;
      }
      for (auto input : outputs) {
         llvm::sys::fs::remove(input);
      }
      if (!llvm::sys::fs::exists(opts.output_fn)) {
         return -1;
      }
   }

   return 0;
}
